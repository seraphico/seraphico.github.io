<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seraph&#39;s Blog</title>
  
  
  <link href="https://me.seraphs.blog/atom.xml" rel="self"/>
  
  <link href="https://me.seraphs.blog/"/>
  <updated>2022-10-10T03:41:01.611Z</updated>
  <id>https://me.seraphs.blog/</id>
  
  <author>
    <name>Seraphico</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DPDK Test</title>
    <link href="https://me.seraphs.blog/network/tcp/2020-12-12-dpdk-part01/"/>
    <id>https://me.seraphs.blog/network/tcp/2020-12-12-dpdk-part01/</id>
    <published>2022-08-16T02:32:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pktmbuf: `dpip <span class="built_in">link</span> show -s`</span><br><span class="line">sapool: `dpip addr show -s`</span><br><span class="line">conn: `ipvsadm -<span class="built_in">ln</span>`</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="network" scheme="https://me.seraphs.blog/categories/network/"/>
    
    <category term="tcp" scheme="https://me.seraphs.blog/categories/network/tcp/"/>
    
    
    <category term="TCP" scheme="https://me.seraphs.blog/tags/TCP/"/>
    
    <category term="网络" scheme="https://me.seraphs.blog/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="系统" scheme="https://me.seraphs.blog/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="数据包" scheme="https://me.seraphs.blog/tags/%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    
    <category term="分析" scheme="https://me.seraphs.blog/tags/%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>network_arp_01</title>
    <link href="https://me.seraphs.blog/network/2017-06-16-network-arp/"/>
    <id>https://me.seraphs.blog/network/2017-06-16-network-arp/</id>
    <published>2017-06-16T08:50:00.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<h6>ARP分组格式</h6><pre><code><table class="tg">  <tr>    <th class="tg-yw4l">以太网目的地址</th>    <th class="tg-yw4l">以太网源地址</th>    <th class="tg-yw4l">帧类型</th>    <th class="tg-yw4l">硬件类型</th>    <th class="tg-yw4l">协议类型</th>    <th class="tg-yw4l">硬件地址长度</th>    <th class="tg-yw4l">协议地址长度</th>    <th class="tg-yw4l">OP</th>    <th class="tg-yw4l">发送端以太网地址</th>    <th class="tg-yw4l">发送端IP地址</th>    <th class="tg-yw4l">目的以太网地址</th>    <th class="tg-yw4l">目的IP地址</th>  </tr>  <tr>    <td class="tg-yw4l">6</td>    <td class="tg-yw4l">6</td>    <td class="tg-yw4l">2</td>    <td class="tg-yw4l">2</td>    <td class="tg-yw4l">2</td>    <td class="tg-yw4l">1</td>    <td class="tg-yw4l">1</td>    <td class="tg-yw4l">2</td>    <td class="tg-yw4l">6</td>    <td class="tg-yw4l">4</td>    <td class="tg-yw4l">6</td>    <td class="tg-yw4l">4</td>  </tr>  <tr>    <td class="tg-yw4l" colspan="3">&lt;-------------------以太网首部-----------------&gt;</td>    <td class="tg-yw4l" colspan="9"><--------------------------28字节APR请求应答--------------------------------></td>  </tr></table></code></pre><pre>ARP协议的帧类型为:0x0806硬件类型：1表示以太网地址硬件地址的长度：值为6协议地址的长度：值为4OP: 1为ARP请求，2为ARP应答，3为RARP请求，4为RARP应答一个完整的抓包：<code>tcpdump -e -p arp -n -vv</code><code>arp -a  #查看arp表，arp有效期一般为20分钟左右</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h6&gt;ARP分组格式&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-yw4l&quot;&gt;以太网目的地址&lt;/th&gt;
    &lt;th class=&quot;tg-yw4l&quot;&gt;以太网源地址&lt;/th&gt;
    &lt;th class</summary>
      
    
    
    
    <category term="network" scheme="https://me.seraphs.blog/categories/network/"/>
    
    
    <category term="network" scheme="https://me.seraphs.blog/tags/network/"/>
    
    <category term="arp" scheme="https://me.seraphs.blog/tags/arp/"/>
    
  </entry>
  
  <entry>
    <title>coreos开发环境01</title>
    <link href="https://me.seraphs.blog/container/2015-10-26-container_01/"/>
    <id>https://me.seraphs.blog/container/2015-10-26-container_01/</id>
    <published>2015-10-25T17:20:05.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<h4>mac下的coreos开发环境搭建</h4><p> 转载注明出处，谢谢。</p><h3 id="主角CoreOS是什么？"><a href="#主角CoreOS是什么？" class="headerlink" title="主角CoreOS是什么？"></a>主角CoreOS是什么？</h3><ul><li><a href="https://coreos.com/">官网地址</a></li></ul><p>Open Source Projects for Linux Containers: 为linux容器打造的专属项目.<br>Popular open source projects for distributed app: 非常流行的分布式开<br>源项目.当然谁都不会说自家东西烂,试过再说.其次可以把他当成一个专为容器技术定制<br>的兼容性很强的操作系统,要不然就不叫OS。</p><h3 id="vagrant-是什么？"><a href="#vagrant-是什么？" class="headerlink" title="vagrant 是什么？"></a>vagrant 是什么？</h3><p>简单理解为一个可以操作virtualbox,vmware,xen,kvm等虚拟化环境的工具。创建，<br>停止,删除,打包虚拟机等等。功能于一身与docker功能相似,可以看作容器的一种(个人<br>理解)。</p><h3 id="virtualbox-是什么？"><a href="#virtualbox-是什么？" class="headerlink" title="virtualbox 是什么？"></a>virtualbox 是什么？</h3><p>开源免费虚拟化技术的一种,由德国人研发，当年红极一时的Sun公司出品，后被oracle<br>公司收购作为自家的虚拟化技术。与vmware workstation,kvm,xen类似。</p><h5>1. 环境需求</h5><p> Vagrant 版本: agrant 1.7.4</p><p> VirtualBox 版本： 4.3.18 r96516 </p><p> coreos 版本： alpha v845.0.0</p><h5>2. 安装VirtualBox </h5>- [参考官方手册](https://www.virtualbox.org/manual/UserManual.html)<h5>3. 安装vagrant </h5>- [参考官方手册](https://docs.vagrantup.com/v2/installation/index.html)<p>虽然官方上面没有写很详细的安装步骤，但是vagrant 安装并不难，mac下只需要执行dmg文件即可</p><p>卸载方式也很简单，打开安装包里面有uninstall-tools,执行即可。这里不再赘述。</p><h5>4. 安装一个CoreOS实例。</h5><p>为什么说安装一个CoreOS，这里我们创建一个开发环境，那么开发环境的基础就是vagrant+virtualbox</p><p>CoreOS 就是我们要学习的东西，当然你也可以创建一个Centos6，ubuntu等其他操作系统。</p>- [使用vagrant创建Coreos手册](https://coreos.com/os/docs/latest/booting-on-vagrant.html)<h6>a). clone 一个coreos模版(暂时理解为模版)</h6><pre><code>osx:coreos-vagrant seraphico$ mkdir /Volumes/MYDATA/coreos_osdirosx:coreos-vagrant seraphico$ cd /Volumes/MYDATA/coreos_osdirosx:coreos-vagrant seraphico$ git clone https://github.com/coreos/coreos-vagrant.git</code></pre><h6>b). 修改为vagrant需要的配置文件</h6><pre><code>osx:coreos_osdir seraphico$ cat config.rb.sample >config.rbosx:coreos_osdir seraphico$ cat user-data.sample >user-data</code></pre><h6>c). 修改配置</h6><pre><code>$num_instances=1</code></pre>  ＃ 其中 1表示开启一个实例。<pre><code>$update_channel='alpha'</code></pre>  ＃ alpha 未完善版本，与之对应的beta和stable(稳定版) 三个版本<p>由于是先熟悉CoreOS，版本我可以随意选择</p><h6>d). 启动实例</h6><p> 首次启动会下载box实例到本地。</p><pre><code>osx:coreos_osdir seraphico$ vagrant upBringing machine 'core-01' up with 'virtualbox' provider...==> core-01: Box 'coreos-alpha' could not be found. Attempting to find and install...    core-01: Box Provider: virtualbox    core-01: Box Version: >= 0==> core-01: Loading metadata for box 'http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json'    core-01: URL: http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json==> core-01: Adding box 'coreos-alpha' (v845.0.0) for provider: virtualbox    core-01: Downloading: http://alpha.release.core-os.net/amd64-usr/845.0.0/coreos_production_vagrant.box    core-01: Calculating and comparing box checksum...==> core-01: Successfully added box 'coreos-alpha' (v845.0.0) for 'virtualbox'!==> core-01: Importing base box 'coreos-alpha'...==> core-01: Matching MAC address for NAT networking...==> core-01: Checking if box 'coreos-alpha' is up to date...==> core-01: Setting the name of the VM: coreos_osdir_core-01_1445871270098_82831==> core-01: Clearing any previously set network interfaces...==> core-01: Preparing network interfaces based on configuration...    core-01: Adapter 1: nat    core-01: Adapter 2: hostonly==> core-01: Forwarding ports...    core-01: 22 => 2222 (adapter 1)==> core-01: Running 'pre-boot' VM customizations...==> core-01: Booting VM...==> core-01: Waiting for machine to boot. This may take a few minutes...    core-01: SSH address: 127.0.0.1:2222    core-01: SSH username: core    core-01: SSH auth method: private key    core-01: Warning: Connection timeout. Retrying...==> core-01: Machine booted and ready!==> core-01: Setting hostname...==> core-01: Configuring and enabling network interfaces...==> core-01: Running provisioner: file...==> core-01: Running provisioner: shell...    core-01: Running: inline scriptosx:coreos_osdir seraphico$</code></pre><h6>e). 连接CoreOS实例</h6><p>命令：vagrant ssh core-01 -- -A</p><pre><code><p>osx:coreos_osdir seraphico$ vagrant ssh core-01 -- -ALast login: Mon Oct 26 15:46:02 2015 from 10.0.2.2CoreOS alpha (845.0.0)core@core-01 ~ $ whoamicorecore@core-01 ~ $ cat /etc/issue<p>This is \n (\s \m \r) \t<br>SSH host key: SHA256:xP5Mi+xVWI2mJvgxTpFFHV2ziagsCmY7f12ChNLOF+k (DSA)<br>SSH host key: SHA256:UhJyAoxHnqi&#x2F;gu5CochZWJnuQ5z3PGuVipjIBLA9PE4 (ED25519)<br>SSH host key: SHA256:MVt3eHzEJjCPsO&#x2F;Vf129ccCywrirgfw2fjTMatFNAf0 (RSA)<br>eth0: \4&#123;eth0&#125; \6&#123;eth0&#125;<br>eth1: \4&#123;eth1&#125; \6&#123;eth1&#125;</p><p>core@core-01 ~ $ sudo su -<br>core-01 ~ # ifconfig<br>eth0: flags&#x3D;4163’&lt;’UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255<br>        inet6 fe80::a00:27ff:fe5b:d0a6  prefixlen 64  scopeid 0x20’&lt;’link’&gt;’’<br>        ether 08:00:27:5b:d0:a6  txqueuelen 1000  (Ethernet)<br>        RX packets 10829  bytes 8320943 (7.9 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 6213  bytes 411605 (401.9 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</p><p>eth1: flags&#x3D;4163’&lt;’UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.17.8.101  netmask 255.255.255.0  broadcast 172.17.8.255<br>        inet6 fe80::a00:27ff:fe2d:3b38  prefixlen 64  scopeid 0x20’&lt;’link’&gt;’’<br>        ether 08:00:27:2d:3b:38  txqueuelen 1000  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 29  bytes 2242 (2.1 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</p><p>flannel0: flags&#x3D;4305’&lt;’UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472<br>        inet 10.1.46.0  netmask 255.255.0.0  destination 10.1.46.0<br>        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</p><p>lo: flags&#x3D;73’&lt;’UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10’&lt;’host’&gt;’<br>        loop  txqueuelen 0  (Local Loopback)<br>        RX packets 6956  bytes 1680737 (1.6 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 6956  bytes 1680737 (1.6 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</p><p>core-01 ~ # ping -c 1 <a href="http://www.baidu.com/">www.baidu.com</a><br>PING <a href="http://www.a.shifen.com/">www.a.shifen.com</a> (61.135.169.121) 56(84) bytes of data.<br>64 bytes from 61.135.169.121: icmp_seq&#x3D;1 ttl&#x3D;63 time&#x3D;5.19 ms</p><p>— <a href="http://www.a.shifen.com/">www.a.shifen.com</a> ping statistics —<br>1 packets transmitted, 1 received, 0% packet loss, time 0ms<br>rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 5.193&#x2F;5.193&#x2F;5.193&#x2F;0.000 ms<br>core-01 ~ #</p></p></code></pre><h6>f). 看一下最终效果</h6><p> 与此同时你能在virtualbox当中看到一个由vagrant创建虚拟机。</p><p><img src="/images/02.png" alt="container"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4&gt;mac下的coreos开发环境搭建&lt;/h4&gt;

&lt;p&gt; 转载注明出处，谢谢。&lt;/p&gt;


&lt;h3 id=&quot;主角CoreOS是什么？&quot;&gt;&lt;a href=&quot;#主角CoreOS是什么？&quot; class=&quot;headerlink&quot; title=&quot;主角CoreOS是什么？&quot;&gt;&lt;/a&gt;主</summary>
      
    
    
    
    <category term="container" scheme="https://me.seraphs.blog/categories/container/"/>
    
    
    <category term="coreos" scheme="https://me.seraphs.blog/tags/coreos/"/>
    
    <category term="Container" scheme="https://me.seraphs.blog/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>zabbix_gethost_01</title>
    <link href="https://me.seraphs.blog/zabbix/2015-08-13-zabbix-get-host/"/>
    <id>https://me.seraphs.blog/zabbix/2015-08-13-zabbix-get-host/</id>
    <published>2015-08-13T04:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统环境：</p><pre>CentOS 5.5 x84_64位Zabbix版本2.2.3</pre><p>环境部署，建议官方文档。</p><p>zabbix api 使用</p><pre><code>#!/usr/bin/env python#auth:seraphico#email:import jsonimport urllib2from urllib2 import URLErrorimport osimport sysclass login_get(object):    def __init__(self):        self.url = "http://x.x.x.x/api_jsonrpc.php"        self.user = "xxxxxxx"        self.password="xxxxxxxxx"         self.header = &#123;"Content-Type": "application/json"&#125;        self.authID = self.user_login()    def user_login(self):        data = json.dumps(&#123;            "jsonrpc": "2.0",            "method": "user.login",            "params": &#123;                "user": self.user,                "password": self.password                      &#125;,            "id": 0        &#125;)        request = urllib2.Request(self.url,data)        for key in self.header:            request.add_header(key,self.header[key])        try:            result = urllib2.urlopen(request)        except Exception as e:            print "Auth Failed, Please Check Your Name And Password:",e.code        else:            response = json.loads(result.read())            result.close()            authID = response['result']            return authID    def get_data(self,data,hostip=""):        request = urllib2.Request(self.url,data,self.header)        try:            result = urllib2.urlopen(request)        except Exception as e:            if hasattr(e, "reason"):                print "Failed to reach a server."                print "Reason:", e.reason            elif hasattr(e, "reason"):                print 'The server could not fulfill the request.'                print 'Error code: ', e.code            return 0        else:            response = json.loads(result.read())            result.close()            return responselogin = login_get()def main():    userid = login.user_login()    return  useriddef ReData(data):    re_data = login.get_data(data)    return re_dataif __name__ == "__main__":    main()</code></pre><h2> 如何调用</h2><pre><code>#!/usr/bin/python#coding:utf8<p>import os<br>import sys<br>import json<br>import urllib2<br>import zablogin</p><p>class get_infor(object):<br>    def <strong>init</strong>(self):<br>        self.auid &#x3D; zablogin.main()<br>    def get_test(self):<br>        data &#x3D; json.dumps(&#123;<br>            “jsonrpc”: “2.0”,<br>            “method”: “host.get”,<br>            “params”: &#123;<br>                 “output”: “extend”,<br>             &#125;,<br>            “auth”: self.auid,<br>            “id”: 1<br>            &#125;)<br>        self.re &#x3D; zablogin.ReData(data)<br>        for x in self.re[‘result’]:<br>            print x[‘host’],x[‘hostid’],x[‘status’],x[‘name’]</p><p>def main():<br>    result &#x3D; get_infor()<br>    return result.get_test()<br>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>    main()<br></code></pre></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;操作系统环境：&lt;/p&gt;
&lt;pre&gt;CentOS 5.5 x84_64位
Zabbix版本2.2.3
&lt;/pre&gt;
&lt;p&gt;
环境部署，建议官方文档。
&lt;/p&gt;
&lt;p&gt;zabbix api 使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/usr/bin/env python
#a</summary>
      
    
    
    
    <category term="zabbix" scheme="https://me.seraphs.blog/categories/zabbix/"/>
    
    
    <category term="Zabbix" scheme="https://me.seraphs.blog/tags/Zabbix/"/>
    
    <category term="Zabbix Get" scheme="https://me.seraphs.blog/tags/Zabbix-Get/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-learn</title>
    <link href="https://me.seraphs.blog/git/script/2015-07-07-gitlab-learn/"/>
    <id>https://me.seraphs.blog/git/script/2015-07-07-gitlab-learn/</id>
    <published>2015-07-07T04:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<pre>Distribution      : CentOS 6.5GitLab version    : 6.0 - 6.3Web Server        : Apache, NginxInit system       : sysvinitDatabase          : MySQL, PostgreSQL<h5>Contributors      : @nielsbasjes, @axilleas, @mairin, @ponsjuh, @yorn, @psftw, @etcet</h5>Additional Notes  : In order to get a proper Ruby setup we build it from source</pre><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Please read <code>doc/install/requirements.md</code> for hardware and platform requirements.</p><h3 id="Important-Notes"><a href="#Important-Notes" class="headerlink" title="Important Notes"></a>Important Notes</h3><p>The following steps have been known to work and should be followed from up to bottom.<br>If you deviate from this guide, do it with caution and make sure you don’t violate<br>any assumptions GitLab makes about its environment. We have also tried this on<br>RHEL 6.3 and found that there are subtle differences which are documented in part.<br>Look for the <strong>RHEL Notes</strong> note.</p><h4 id="If-you-find-a-bug"><a href="#If-you-find-a-bug" class="headerlink" title="If you find a bug"></a>If you find a bug</h4><p>If you find a bug&#x2F;error in this guide please submit an issue or pull request<br>following the contribution guide (see <a href="../../CONTRIBUTING.md">CONTRIBUTING.md</a>).</p><h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><p>Many setup guides of Linux software simply state: “disable selinux and firewall”.<br>This guide does not disable any of them, we simply configure them as they were intended.</p><hr><p>The GitLab installation consists of setting up the following components:</p><ol><li>Install the base operating system (CentOS 6.4 Minimal) and Packages &#x2F; Dependencies</li><li>Ruby</li><li>System Users</li><li>GitLab shell</li><li>Database</li><li>GitLab</li><li>Web server</li><li>Firewall</li></ol><hr><h2 id="1-Installing-the-operating-system-CentOS-6-4-Minimal"><a href="#1-Installing-the-operating-system-CentOS-6-4-Minimal" class="headerlink" title="1. Installing the operating system (CentOS 6.4 Minimal)"></a>1. Installing the operating system (CentOS 6.4 Minimal)</h2><p>We start with a completely clean CentOS 6.4 “minimal” installation which can be<br>accomplished by downloading the appropriate installation iso file. Just boot the<br>system of the iso file and install the system.</p><p>Note that during the installation you use the <em>“Configure Network”</em> option (it’s a<br>button in the same screen where you specify the hostname) to enable the <em>“Connect automatically”</em><br>option for the network interface and hand (usually eth0).</p><p><strong>If you forget this option the network will NOT start at boot.</strong></p><p>The end result is a bare minimum CentOS installation that effectively only has<br>network connectivity and (almost) no services at all.</p><h2 id="Updating-and-adding-basic-software-and-services"><a href="#Updating-and-adding-basic-software-and-services" class="headerlink" title="Updating and adding basic software and services"></a>Updating and adding basic software and services</h2><h3 id="Add-EPEL-repository"><a href="#Add-EPEL-repository" class="headerlink" title="Add EPEL repository"></a>Add EPEL repository</h3><p><a href="https://fedoraproject.org/wiki/EPEL">EPEL</a> is a volunteer-based community effort from the Fedora project to create<br>a repository of high-quality add-on packages that complement the Fedora-based<br>Red Hat Enterprise Linux (RHEL) and its compatible spinoffs, such as CentOS and Scientific Linux.</p><p>As part of the Fedora packaging community, EPEL packages are 100% free&#x2F;libre open source software (FLOSS).</p><p>Download the GPG key for EPEL repository from <a href="https://fedoraproject.org/keys">fedoraproject</a> and install it on your system:</p><pre><code>sudo wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6 https://www.fedoraproject.org/static/0608B895.txtsudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</code></pre><p>Verify that the key got installed successfully:</p><pre><code>sudo rpm -qa gpg*gpg-pubkey-0608b895-4bd22942</code></pre><p>Now install the <code>epel-release-6-8.noarch</code> package, which will enable EPEL repository on your system:</p><pre><code>sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</code></pre><p><strong>Note:</strong> Don’t mind the <code>x86_64</code>, if you install on a i686 system you can use the same commands.</p><h3 id="Add-PUIAS-Computational-repository"><a href="#Add-PUIAS-Computational-repository" class="headerlink" title="Add PUIAS Computational repository"></a>Add PUIAS Computational repository</h3><p>The <a href="https://puias.math.ias.edu/wiki/YumRepositories6#Computational">PUIAS Computational</a> repository is a part of <a href="https://puias.math.ias.edu/">PUIAS&#x2F;Springdale Linux</a>,<br>a custom Red Hat&amp;reg; distribution maintained by <a href="http://www.princeton.edu/">Princeton University</a> and the<br><a href="http://www.ias.edu/">Institute for Advanced Study</a>.  We take advantage of the PUIAS<br>Computational repository to obtain a git v1.8.x package since the base CentOS<br>repositories only provide v1.7.1 which is not compatible with GitLab.<br>Although the PUIAS offers an RPM to install the repo, it requires the<br>other PUIAS repos as a dependency, so you’ll have to add it manually.</p><p>Create &#x2F;etc&#x2F;yum.repos.d&#x2F;PUIAS_6_computational.repo and add the following lines:</p><pre><code>[PUIAS_6_computational]name=PUIAS computational Base $releasever - $basearchmirrorlist=http://puias.math.ias.edu/data/puias/computational/$releasever/$basearch/mirrorlist#baseurl=http://puias.math.ias.edu/data/puias/computational/$releasever/$basearchgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-puias</code></pre><p>Next download and install the gpg key.</p><pre><code>sudo wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-puias http://springdale.math.ias.edu/data/puias/6/x86_64/os/RPM-GPG-KEY-puiassudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-puias</code></pre><p>Verify that the key got installed successfully:</p><pre><code>sudo rpm -qa gpg*gpg-pubkey-41a40948-4ce19266</code></pre><p>Verify that the EPEL and PUIAS Computational repositories are enabled as shown below:</p><pre><code>sudo yum repolistrepo id                 repo name                                                statusPUIAS_6_computational   PUIAS computational Base 6 - x86_64                      2,018base                    CentOS-6 - Base                                          4,802epel                    Extra Packages for Enterprise Linux 6 - x86_64           7,879extras                  CentOS-6 - Extras                                           12updates                 CentOS-6 - Updates                                         814repolist: 15,525</code></pre><p>If you can’t see them listed, use the folowing command (from yum-utils package) to enable them:</p><pre><code>sudo yum-config-manager --enable epel --enable PUIAS_6_computational</code></pre><h3 id="Install-the-required-tools-for-GitLab"><a href="#Install-the-required-tools-for-GitLab" class="headerlink" title="Install the required tools for GitLab"></a>Install the required tools for GitLab</h3><pre><code>su -yum -y updateyum -y groupinstall &#39;Development Tools&#39;yum -y install vim-enhanced readline readline-devel ncurses-devel gdbm-devel glibc-devel tcl-devel openssl-devel curl-devel expat-devel db4-devel byacc sqlite-devel gcc-c++ libyaml libyaml-devel libffi libffi-devel libxml2 libxml2-devel libxslt libxslt-devel libicu libicu-devel system-config-firewall-tui python-devel redis sudo wget crontabs logwatch logrotate perl-Time-HiRes git</code></pre><p><strong>RHEL Notes</strong></p><p>If some packages (eg. gdbm-devel, libffi-devel and libicu-devel) are NOT installed,<br>add the rhel6 optional packages repo to your server to get those packages:</p><pre><code>yum-config-manager --enable rhel-6-server-optional-rpms</code></pre><p>Tip taken from <a href="https://github.com/gitlabhq/gitlab-recipes/issues/62">here</a>.</p><h3 id="Configure-redis"><a href="#Configure-redis" class="headerlink" title="Configure redis"></a>Configure redis</h3><p>Make sure redis is started on boot:</p><pre><code>sudo chkconfig redis onsudo service redis start</code></pre><h3 id="Configure-sendmail"><a href="#Configure-sendmail" class="headerlink" title="Configure sendmail"></a>Configure sendmail</h3><pre><code>su -yum -y install sendmail-cfcd /etc/mailvim /etc/mail/sendmail.mc</code></pre><p>Add a line with the smtp gateway hostname</p><pre><code>define(`SMART_HOST&#39;, `smtp.example.com&#39;)dnl</code></pre><p>Then replace this line:</p><pre><code>EXPOSED_USER(`root&#39;)dnl</code></pre><p>with:</p><pre><code>dnl EXPOSED_USER(`root&#39;)dnl</code></pre><p>Now enable these settings:</p><pre><code>makechkconfig sendmail on</code></pre><p>Alternatively you can install <code>postfix</code>.</p><hr><h2 id="2-Ruby"><a href="#2-Ruby" class="headerlink" title="2. Ruby"></a>2. Ruby</h2><p>Download and compile it:</p><pre><code>su -mkdir /tmp/ruby &amp;&amp; cd /tmp/rubycurl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xzcd ruby-2.0.0-p353./configure --prefix=/usr/local/make &amp;&amp; make install</code></pre><p>Logout and login again for the <code>$PATH</code> to take effect. Check that ruby is properly<br>installed with:</p><pre><code>which ruby# /usr/local/bin/rubyruby -v# ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]</code></pre><p>Install the Bundler Gem:</p><pre><code> sudo gem install bundler --no-ri --no-rdoc</code></pre><p><strong>NOTE:</strong> If you get an error like <code>sudo: gem: command not found</code>, it is because<br>CentOS has sudo built with the <code>--with-secure-path</code> flag. See this post on <a href="http://stackoverflow.com/questions/257616/sudo-changes-path-why">stackoverflow</a><br>on how to deal with it. Alternatively, login as root and run the command.</p><hr><h2 id="3-System-Users"><a href="#3-System-Users" class="headerlink" title="3. System Users"></a>3. System Users</h2><h3 id="Create-user-for-Git"><a href="#Create-user-for-Git" class="headerlink" title="Create user for Git"></a>Create user for Git</h3><pre><code>su -adduser --system --shell /bin/bash --comment &#39;GitLab&#39; --create-home --home-dir /home/git/ git</code></pre><p>We do NOT set the password so this user cannot login.</p><h3 id="Forwarding-all-emails"><a href="#Forwarding-all-emails" class="headerlink" title="Forwarding all emails"></a>Forwarding all emails</h3><p>Now we want all logging of the system to be forwarded to a central email address:</p><pre><code>su -echo adminlogs@example.com &gt; /root/.forwardchown root /root/.forwardchmod 600 /root/.forwardrestorecon /root/.forwardecho adminlogs@example.com &gt; /home/git/.forwardchown git /home/git/.forwardchmod 600 /home/git/.forwardrestorecon /home/git/.forward</code></pre><hr><h2 id="4-GitLab-shell"><a href="#4-GitLab-shell" class="headerlink" title="4. GitLab shell"></a>4. GitLab shell</h2><p>GitLab Shell is a ssh access and repository management software developed specially for GitLab.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># First login as root</span><br><span class="line">su -</span><br><span class="line"></span><br><span class="line"># Login as git</span><br><span class="line">su - git</span><br><span class="line"></span><br><span class="line"># Clone gitlab shell</span><br><span class="line">git clone https://github.com/gitlabhq/gitlab-shell.git</span><br><span class="line">cd gitlab-shell</span><br><span class="line"></span><br><span class="line"># Switch to right version</span><br><span class="line">git checkout v1.8.0</span><br><span class="line">cp config.yml.example config.yml</span><br><span class="line"></span><br><span class="line"># Edit config and replace gitlab_url with something like &#x27;http://domain.com/&#x27;</span><br><span class="line">#</span><br><span class="line"># Note, &#x27;gitlab_url&#x27; is used by gitlab-shell to access GitLab API. Since </span><br><span class="line">#     1. the whole communication is locally</span><br><span class="line">#     2. next steps will explain how to expose GitLab over HTTPS with custom cert</span><br><span class="line"># it&#x27;s a good solution is to set gitlab_url as &quot;http://localhost:8080/&quot;</span><br><span class="line"></span><br><span class="line"># Do setup</span><br><span class="line">./bin/install</span><br></pre></td></tr></table></figure><hr><h2 id="5-Database"><a href="#5-Database" class="headerlink" title="5. Database"></a>5. Database</h2><h3 id="5-1-MySQL"><a href="#5-1-MySQL" class="headerlink" title="5.1 MySQL"></a>5.1 MySQL</h3><p>Install <code>mysql</code> and enable the <code>mysqld</code> service to start on boot:</p><pre><code>su -yum install -y mysql-server mysql-develchkconfig mysqld onservice mysqld start</code></pre><p>Secure MySQL by entering a root password and say “Yes” to all questions:</p><pre><code>/usr/bin/mysql_secure_installation</code></pre><p>Create a new user and database for GitLab:</p><pre><code># Login to MySQLmysql -u root -p# Type the database root password# Create a user for GitLab. (change supersecret to a real password)CREATE USER &#39;gitlab&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;supersecret&#39;;# Create the GitLab production databaseCREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;# Grant the GitLab user necessary permissopns on the table.GRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &#39;gitlab&#39;@&#39;localhost&#39;;# Quit the database session\q</code></pre><p>Try connecting to the new database with the new user:</p><pre><code>mysql -u gitlab -p -D gitlabhq_production# Type the password you replaced supersecret with earlier# Quit the database session\q</code></pre><h3 id="5-2-PostgreSQL"><a href="#5-2-PostgreSQL" class="headerlink" title="5.2 PostgreSQL"></a>5.2 PostgreSQL</h3><p>Install <code>postgresql-server</code> and the <code>postgreqsql-devel</code> libraries.</p><pre><code>su -yum install postgresql-server postgresql-devel</code></pre><p>Initialize the database.</p><pre><code>service postgresql initdb</code></pre><p>Start the service and configure service to start on boot</p><pre><code>service postgresql startchkconfig postgresql on</code></pre><p>Configure the database user and password.</p><pre><code>su - postgrespsql -d template1psql (8.4.13)template1=# CREATE USER git WITH PASSWORD &#39;your-password-here&#39;;CREATE ROLEtemplate1=# CREATE DATABASE gitlabhq_production OWNER git;CREATE DATABASEtemplate1=# \qexit # exit uid=postgres, return to root</code></pre><p>Test the connection as the gitlab (uid&#x3D;git) user.</p><pre><code>su - gitpsql -d gitlabhq_production -W # prompts for your password.</code></pre><hr><h2 id="6-GitLab"><a href="#6-GitLab" class="headerlink" title="6. GitLab"></a>6. GitLab</h2><p>We’ll install GitLab into home directory of the user <code>git</code>:</p><pre><code>su -su - git</code></pre><h3 id="Clone-the-Source"><a href="#Clone-the-Source" class="headerlink" title="Clone the Source"></a>Clone the Source</h3><pre><code># Clone GitLab repositorygit clone https://github.com/gitlabhq/gitlabhq.git gitlab# Go to gitlab directorycd /home/git/gitlab# Checkout to stable releasegit checkout 6-3-stable</code></pre><p><strong>Note:</strong> You can change <code>6-3-stable</code> to <code>master</code> if you want the <em>bleeding edge</em> version, but<br>do so with caution!</p><h3 id="Configure-it"><a href="#Configure-it" class="headerlink" title="Configure it"></a>Configure it</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Copy the example GitLab config</span><br><span class="line">cp config/gitlab.yml.example config/gitlab.yml</span><br><span class="line"></span><br><span class="line"># Replace your_domain_name with the fully-qualified domain name of your host serving GitLab</span><br><span class="line">sed -i &#x27;s|localhost|your_domain_name|g&#x27; config/gitlab.yml</span><br><span class="line"></span><br><span class="line"># Make sure GitLab can write to the log/ and tmp/ directories</span><br><span class="line">chown -R git log/</span><br><span class="line">chown -R git tmp/</span><br><span class="line">chmod -R u+rwX  log/</span><br><span class="line">chmod -R u+rwX  tmp/</span><br><span class="line"></span><br><span class="line"># Create directory for satellites</span><br><span class="line">mkdir /home/git/gitlab-satellites</span><br><span class="line"></span><br><span class="line"># Create directories for sockets/pids and make sure GitLab can write to them</span><br><span class="line">mkdir tmp/pids/</span><br><span class="line">mkdir tmp/sockets/</span><br><span class="line">chmod -R u+rwX  tmp/pids/</span><br><span class="line">chmod -R u+rwX  tmp/sockets/</span><br><span class="line"></span><br><span class="line"># Create public/uploads directory otherwise backup will fail</span><br><span class="line">mkdir public/uploads</span><br><span class="line">chmod -R u+rwX  public/uploads</span><br><span class="line"></span><br><span class="line"># Copy the example Unicorn config</span><br><span class="line">cp config/unicorn.rb.example config/unicorn.rb</span><br><span class="line"></span><br><span class="line"># Enable cluster mode if you expect to have a high load instance</span><br><span class="line"># E.g. change amount of workers to 3 for 2GB RAM server</span><br><span class="line">editor config/unicorn.rb</span><br><span class="line"></span><br><span class="line"># Configure Git global settings for git user, useful when editing via web</span><br><span class="line"># Edit user.email according to what is set in gitlab.yml</span><br><span class="line">git config --global user.name &quot;GitLab&quot;</span><br><span class="line">git config --global user.email &quot;gitlab@your_domain_name&quot;</span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><p><strong>Important:</strong> Make sure to edit both <code>gitlab.yml</code> and <code>unicorn.rb</code> to match your setup.</p><h3 id="Configure-GitLab-DB-settings"><a href="#Configure-GitLab-DB-settings" class="headerlink" title="Configure GitLab DB settings"></a>Configure GitLab DB settings</h3><pre><code># MySQLcp config/database.yml&#123;.mysql,&#125;# PostgreSQL cp config/database.yml&#123;.postgresql,&#125;</code></pre><p>Make sure to update username&#x2F;password in <code>config/database.yml</code>. You only need to adapt the production settings (first part).</p><pre><code># PostgreSQL example config/database.yml# disable host/port in order to support the default postgresql ident auth# PRODUCTIONproduction:  adapter: postgresql  encoding: unicode  database: gitlabhq_production  pool: 5  username: git  password: your-password-here  #host: localhost  #port: 5432   # socket: /tmp/postgresql.sock </code></pre><p>If you followed the database guide then please do as follows:</p><ul><li>Change <code>root</code> to <code>gitlab</code>.</li><li>Change <code>secure password</code> with the value you have given to supersecret.</li></ul><p>You can keep the double quotes around the password.</p><pre><code>editor config/database.yml</code></pre><p>Make config&#x2F;database.yml readable to git only</p><pre><code>chmod o-rwx config/database.yml</code></pre><h3 id="Install-Gems"><a href="#Install-Gems" class="headerlink" title="Install Gems"></a>Install Gems</h3><pre><code>su -gem install charlock_holmes --version &#39;0.6.9.4&#39;exit</code></pre><p>For MySQL (note, the option says “without … postgres”):</p><pre><code>cd /home/git/gitlab/bundle install --deployment --without development test postgres puma aws</code></pre><h3 id="Initialize-Database-and-Activate-Advanced-Features"><a href="#Initialize-Database-and-Activate-Advanced-Features" class="headerlink" title="Initialize Database and Activate Advanced Features"></a>Initialize Database and Activate Advanced Features</h3><pre><code>cd /home/git/gitlabbundle exec rake gitlab:setup RAILS_ENV=production</code></pre><p>Type ‘yes’ to create the database.<br>When done you see ‘Administrator account created:’</p><h3 id="Install-Init-Script"><a href="#Install-Init-Script" class="headerlink" title="Install Init Script"></a>Install Init Script</h3><p>Download the init script (will be &#x2F;etc&#x2F;init.d&#x2F;gitlab):</p><pre><code>su -wget -O /etc/init.d/gitlab https://raw.github.com/gitlabhq/gitlab-recipes/master/init/sysvinit/centos/gitlab-unicornchmod +x /etc/init.d/gitlabchkconfig --add gitlab</code></pre><p>Make GitLab start on boot:</p><pre><code>chkconfig gitlab on</code></pre><h3 id="Check-Application-Status"><a href="#Check-Application-Status" class="headerlink" title="Check Application Status"></a>Check Application Status</h3><p>Check if GitLab and its environment are configured correctly:</p><pre><code>su - gitcd gitlab/bundle exec rake gitlab:env:info RAILS_ENV=productionexit</code></pre><h3 id="Start-your-GitLab-instance"><a href="#Start-your-GitLab-instance" class="headerlink" title="Start your GitLab instance:"></a>Start your GitLab instance:</h3><pre><code>service gitlab start</code></pre><h3 id="Double-check-Application-Status"><a href="#Double-check-Application-Status" class="headerlink" title="Double-check Application Status"></a>Double-check Application Status</h3><p>To make sure you didn’t miss anything run a more thorough check with:</p><pre><code>su - gitcd gitlab/bundle exec rake gitlab:check RAILS_ENV=production</code></pre><p>Now, the output will complain that your init script is not up-to-date as follows:</p><p>Init script up-to-date? … no<br>  Try fixing it:<br>  Redownload the init script<br>  For more information see:<br>  doc&#x2F;install&#x2F;installation.md in section “Install Init Script”<br>  Please fix the error above and rerun the checks.  </p><p>Do not care about it  if you are sure that you have downloaded the up-to-date file from <a href="https://raw.github.com/gitlabhq/gitlab-recipes/master/init/sysvinit/centos/gitlab-unicorn">https://raw.github.com/gitlabhq/gitlab-recipes/master/init/sysvinit/centos/gitlab-unicorn</a> and saved it to &#x2F;etc&#x2F;init.d&#x2F;gitlab.<br>If all other items are green, then congratulations on successfully installing GitLab!<br>However there are still a few steps left.</p><h2 id="7-Configure-the-web-server"><a href="#7-Configure-the-web-server" class="headerlink" title="7. Configure the web server"></a>7. Configure the web server</h2><p>Use either Nginx or Apache, not both. Official installation guide recommends nginx.</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br><span class="line">yum -y install nginx</span><br><span class="line">chkconfig nginx on</span><br><span class="line">mkdir /etc/nginx/sites-&#123;available,enabled&#125;</span><br><span class="line">wget -O /etc/nginx/sites-available/gitlab https://raw.github.com/gitlabhq/gitlab-recipes/master/web-server/nginx/gitlab-ssl</span><br><span class="line">ln -sf /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab</span><br></pre></td></tr></table></figure><p>Edit <code>/etc/nginx/nginx.conf</code> and replace <code>include /etc/nginx/conf.d/*.conf;</code><br>with <code>include /etc/nginx/sites-enabled/*;</code></p><p>Edit <code>/etc/nginx/sites-available/gitlab</code> and replace <code>git.example.com</code> with your FQDN.</p><p>Add <code>nginx</code> user to <code>git</code> group.</p><pre><code>usermod -a -G git nginxchmod g+rx /home/git/</code></pre><p><strong>Note:</strong> Don’t forget to add a SSL certificate or generate a Self Signed Certificate</p><pre><code>cd /etc/nginxopenssl req -new -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key</code></pre><p>Finally start nginx with:</p><pre><code>service nginx start</code></pre><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>We will configure apache with module <code>mod_proxy</code> which is loaded by default when<br>installing apache:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br><span class="line">yum -y install httpd mod_ssl</span><br><span class="line">chkconfig httpd on</span><br><span class="line">wget -O /etc/httpd/conf.d/gitlab.conf https://raw.github.com/gitlabhq/gitlab-recipes/master/web-server/apache/gitlab.conf</span><br></pre></td></tr></table></figure><p>Open <code>/etc/httpd/conf.d/gitlab.conf</code> with your editor and replace <code>git.example.org</code> with your FQDN.</p><p>Add <code>LoadModule ssl_module /etc/httpd/modules/mod_ssl.so</code> in <code>/etc/httpd/conf/httpd.conf</code></p><p>If you want to run other websites on the same system, you’ll need to add in <code>/etc/httpd/conf/httpd.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NameVirtualHost *:80</span><br><span class="line">&lt;IfModule mod_ssl.c&gt;</span><br><span class="line">    # If you add NameVirtualHost *:443 here, you will also have to change</span><br><span class="line">    # the VirtualHost statement in /etc/httpd/conf.d/gitlab.conf</span><br><span class="line">    # to &lt;VirtualHost *:443&gt;</span><br><span class="line">    NameVirtualHost *:443</span><br><span class="line">    Listen 443</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>Poke a selinux hole for httpd so it can be in front of GitLab:</p><pre><code>setsebool -P httpd_can_network_connect on</code></pre><p>Start apache:</p><pre><code>service httpd start</code></pre><h2 id="8-Configure-the-firewall"><a href="#8-Configure-the-firewall" class="headerlink" title="8. Configure the firewall"></a>8. Configure the firewall</h2><p>Poke an iptables hole so users can access the httpd (http and https ports) and ssh.</p><pre><code>lokkit -s http -s https -s ssh</code></pre><p>Restart the service for the changes to take effect:</p><pre><code>service iptables restart</code></pre><h2 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h2><p>Visit YOUR_SERVER for your first GitLab login.<br>The setup has created an admin account for you. You can use it to log in:</p><pre><code>admin@local.host5iveL!fe</code></pre><p>You will then be redirected to change the default admin password.</p><h2 id="Links-used-in-this-guide"><a href="#Links-used-in-this-guide" class="headerlink" title="Links used in this guide"></a>Links used in this guide</h2><ul><li><a href="http://www.thegeekstuff.com/2012/06/enable-epel-repository/">EPEL information</a></li><li><a href="http://wiki.centos.org/TipsAndTricks/SelinuxBooleans">SELinux booleans</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;Distribution      : CentOS 6.5
GitLab version    : 6.0 - 6.3
Web Server        : Apache, Nginx
Init system       : sysvinit
Database   </summary>
      
    
    
    
    <category term="git" scheme="https://me.seraphs.blog/categories/git/"/>
    
    <category term="script" scheme="https://me.seraphs.blog/categories/git/script/"/>
    
    
    <category term="git" scheme="https://me.seraphs.blog/tags/git/"/>
    
    <category term="github" scheme="https://me.seraphs.blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Shell-cookbook-01</title>
    <link href="https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook01/"/>
    <id>https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook01/</id>
    <published>2015-04-10T01:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<p> 思想（KISS）相当重要,我们遵循KISS原则(keep it simple\stupid),这事其实不难，只要按照以下思路进行就行了。</p> <blockquote><ol><li>把复杂的问题简单化，模块化 </li><li>写出每一个模块的伪码。 </li><li>组装你的模块 </li><li>写出shell code </li><li>测试（test）</li></ol></blockquote><p>知道什么时候用什么实现，远比你知道怎么写code更重要。（shell不是万能的，择优取之。shell最精华，最美的地方在于有现成的命令可以使用，不用考虑过多的底层的问题。作为上层工作的最好的工具.所谓上层指系统管理，网络管理等等。)</p><p><strong>战略决定生死，细节决定成败</strong></p><h3>shell章节</h3><ul><li><pre><code>讨厌的正则</code></pre><ul><li><pre><code>可爱的变量</code></pre><ul><li><pre><code>简单明了的输入输出</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 思想（KISS）相当重要,我们遵循KISS原则(keep it simple\stupid),这事其实不难，只要按照以下思路进行就行了。&lt;/p&gt;
 
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;把复杂的问题简单化，模块化 &lt;/li&gt;
&lt;li&gt;写出每一个模块的伪码。 &lt;/l</summary>
      
    
    
    
    <category term="shell" scheme="https://me.seraphs.blog/categories/shell/"/>
    
    <category term="script" scheme="https://me.seraphs.blog/categories/shell/script/"/>
    
    
    <category term="SHELL" scheme="https://me.seraphs.blog/tags/SHELL/"/>
    
    <category term="编程" scheme="https://me.seraphs.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Shell-cookbook-02</title>
    <link href="https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook02/"/>
    <id>https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook02/</id>
    <published>2015-04-10T01:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<h2>第一节讨厌的正则</h2><h2 id="section1">之所以讨厌一个事物，是因为你驾驭不了它。</h2><h5 id="section1-1">一.乱七八糟的符号。</h5>(1)   <p>举例：（grep  为行模式，默认以行显示）</p><pre><code>[root@localhost ~]# cat /etc/passwd | grep --color "r..t"root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologin[root@localhost ~]# </code></pre><p>显示三行</p><p>(2)</p><pre><code>[root@localhost ~]# cat /etc/passwd | grep --color 'root'root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin[root@localhost ~]#</code></pre><p>显示两行</p>(3)<pre><code>[root@localhost ~]# cat /etc/passwd | grep --color '^root'root:x:0:0:root:/root:/bin/bash[root@localhost ~]#</code></pre><p>显示一行 </p> <ul><li><pre><code>总结以上`:`什么是正则，两个单引号中间的部分就是正则。</code></pre></li></ul><h5>二.正则有什么用？</h5><p>1.查找匹配</p><p> 1)一个字符（如何在整篇文章中查找一个字符），正则提供了一些特殊符号，通过这些符号去替换一些东西.</p><p>举例：在整篇文章中查找字母a</p>         <p>使用vi编辑器打开&#x2F;etc&#x2F;passwd </p><p>在末行模式下查找a </br>输入：/a/ </p> <p>比如要查找abc，是一个或的关系,那么用 [ ] 。</p>  <p>输入  </br>   ：/[abc]/    </br>   ：/[a-c]/  </br>   ：/a|b|c/</p><p>中括号，把你想要定位的东西写入里面。</p><p><code>.</code>任意一个字符.</p><p><code>[]</code>  选择中括号里面的任意一个。 </p><p><code>[^]</code>  取非，取反 </p><p><code>[:alnum:]</code>阿尔法字符加数字 </p><p><code>[:alpha:]</code>任意一个字符<code>[[:alpha]]</code> </p><p><code>[:digit:]</code>任意一个数字 <code>[[:digit:]]</code>（对它取反的话<code>[^[:digit:]]</code>）意为除了任意一个数字。 </p><p><code>[:lower:]</code>小写。  </p><p><code>[:upper:]</code>大写。</p><p><code>[:space:]</code>空格。</p><p><code>[:punct:]</code>标点。</p><ul><li>总结<code>：</code>以上是如何定位一个字符。</li></ul><p>简单的实例</p><pre><code>[root@localhost ~]# cat testfile | grep --color '.'dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog[root@localhost ~]# cat testfile | grep --color 'dog'dog pig Dogdog d.g dog dog dogpig bird dog[root@localhost ~]# cat testfile | grep --color '[d|D]og'dog pig Dogdog d.g dog dog dogpig bird dog[root@localhost ~]# cat testfile | grep --color '[^dD]og'pig pig .og[root@localhost ~]# cat testfile | grep --color -E 'd|p' dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog[root@localhost ~]#</code></pre><p>备注  –E 代表的是一个扩展的表达方式。其中dp之间的  |  代表的是或的关系，任意取一。</p> <p>1.转义字符  <code>\</code> </p><p>举例：</p><p>当 <code>.</code>  在这不转义的时候就代表是正则中的 .  代表的是匹配任意一个字符。 </p><pre><code>[root@localhost ~]# cat testfile | grep --color -E 'd.g'dog pig Dogdog d.g dog dog dogpig bird dog[root@localhost ~]# </code></pre><p>当`\.`转义之后代表着文本中存在的具体的 `.`</p> <p>2.字符的边界，查找匹配多个字符用到字符边界。</p><p><code>^</code>开头（一行开头）<br><code>$</code>  结尾（一行结尾）<br><code>\&lt;</code>左边界</p><p><code>\&gt;</code>右边界     </p><pre><code>[root@localhost ~]# cat -A /etc/passwdroot:x:0:0:root:/root:/bin/bash$bin:x:1:1:bin:/bin:/sbin/nologin$daemon:x:2:2:daemon:/sbin:/sbin/nologin$adm:x:3:4:adm:/var/adm:/sbin/nologin$lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin$sync:x:5:0:sync:/sbin:/bin/sync$shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown$halt:x:7:0:halt:/sbin:/sbin/halt$mail:x:8:12:mail:/var/spool/mail:/sbin/nologin$uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin$operator:x:11:0:operator:/root:/sbin/nologin$games:x:12:100:games:/usr/games:/sbin/nologin$gopher:x:13:30:gopher:/var/gopher:/sbin/nologin$ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin$</code></pre><p>以上结尾为`$`代表着这一行的字符边界。</p><p>linux与windows之间格式在linux下面的转换方法</p><p>命令`dos2unix` win格式转换linux </p><p>命令`unix2dos`  linux格式转换成win</p><p>3.重复</p><p> *  重复0次或多次。注意ls *  中的 * 不是正则，是shell中的通配符。正则中的*代表前面出现了0次或者多次。  * 〉=0 </p><p>举例：匹配所有字符，字符每个出现次数大于等于0次 </p><pre><code>[root@localhost ~]# cat testfile |  grep --color '.*'dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog[root@localhost ~]# </code></pre><p>a的次数大于等于0次，字符中没有a，它就相当于没有，所以匹配所有。</p><pre><code>[root@localhost ~]# cat testfile |  grep --color 'a*'dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog[root@localhost ~]# </code></pre><p>字符中有d，第一行出现一次。第二行没有出现等于0次，那么匹配。第三行一次，第四行没有那就等于0次，那么匹配。</p><pre><code>[root@localhost ~]# cat testfile |  grep --color 'd*'dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog[root@localhost ~]# </code></pre><p>匹配d，所有出现d的行都匹配出来。 </p><pre><code>[root@localhost ~]# cat testfile |  grep --color 'd'dog pig Dogdog d.g dog dog dogpig bird dog[root@localhost ~]# </code></pre><p>+匹配一个或者多个。+〉=1 </p> <p>举例：匹配d，d+  表示每一行匹配d的次数大于等于1.</p><pre><code>[root@localhost ~]# cat testfile |  grep --color -E 'd+'dog pig Dogdog d.g dog dog dogpig bird dog[root@localhost ~]#</code></pre><p>？匹配0个或者一个。〈=1 </p><p>举例：匹配d，  d？  表示每一行匹配d的次数小于等于一次。</p><pre><code>[root@localhost ~]# cat testfile |  grep --color -E 'd?'dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog</code></pre><p>精确匹配次数。 </p><p>{}  中填入数字代表匹配次数。大于等于次数的行被匹配出。</p> <p>举例：a精确匹配5次。a出现的次数大于等于5次的行被匹配。</p><pre><code>[root@localhost ~]# cat testfile dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dogaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[root@localhost ~]# cat testfile |  grep --color 'a\&#123;5\&#125;'aaaaaaaaaaaaaaaaaaaaaaaaa[root@localhost ~]# </code></pre><p>精确到范围。</p> <p>{n，m} </p>  <p>举例：匹配3至5，包括3和5.</p><code><pre>[root@localhost ~]# cat testfile |  grep --color 'a\&#123;3,5\&#125;'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[root@localhost ~]# </code></pre><p>4.组<br>组的重复</p><p>举例：pig一组，dog一组。其中的  | 有或的意思，如果有组pig或者dog，就匹配这一行。 </p><pre><code>[root@localhost ~]# cat testfile |  grep --color -E '(pig|dog)+'dog pig Dogpig pig .ogdog d.g dog dog dogpig bird dog[root@localhost ~]# </code></pre><p>pig一组，dog一组。Pig或者dog出现的次数大于等于1次，就匹配这一行。 </p><pre><code>[root@localhost ~]# cat testfile |  grep --color -E '(pig|dog)+'dog pig Dogpig pig .ogdog d.g dogdog !dog ddog!pig bird dog[root@localhost ~]# </code></pre><p>Pig一组，dog一组。Pig或者dog出现满足某一行精确到出现两次就匹配。</p><pre><code>[root@localhost ~]# cat testfile |  grep --color -E '(pig|dog)&#123;2&#125;'dog d.g dogdog !dog ddog![root@localhost ~]#</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;第一节讨厌的正则&lt;/h2&gt;


&lt;h2 id=&quot;section1&quot;&gt;之所以讨厌一个事物，是因为你驾驭不了它。&lt;/h2&gt;
&lt;h5 id=&quot;section1-1&quot;&gt;一.乱七八糟的符号。&lt;/h5&gt;
(1)
   
&lt;p&gt;举例：（grep  为行模式，默认以行显示）&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="shell" scheme="https://me.seraphs.blog/categories/shell/"/>
    
    <category term="script" scheme="https://me.seraphs.blog/categories/shell/script/"/>
    
    
    <category term="SHELL" scheme="https://me.seraphs.blog/tags/SHELL/"/>
    
    <category term="编程" scheme="https://me.seraphs.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Shell-cookbook-03</title>
    <link href="https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook03/"/>
    <id>https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook03/</id>
    <published>2015-04-10T01:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<h2>第二节可爱的变量</h2><p>知止，知道正则在什么时候停止。</p><p><I>知止而后能定，定而后能静，静而后能安，安而后能虑，虑而后能得。                                    <br>&copy;语出</I>《大学》</p>正则本身是个贪婪模式，当你发现 `.*` 会匹配所有的东西。所以应该知道正则在哪停止。<p>我们的课程是一门有思想的shell课程.</p><p>--------知识列表--------</p><p>1.bash的通配符</p><p>2.设定变量</p><p>3.变量的工作范围</p><p>4.变量的一些有意思的用法</p><p>5.有用的自带变量</p><p>6.有趣的操作符号</p><p>7.数学运算与数组</p><h3> 一.bash通配符</h3><p>shell常见通配符</p><table><tr><th><I>字符</I></th><th><I>含义</I></th><th><I>实例</I></th></tr><tr><th><I>*</I></th><th><I>匹配0或多个字符</I></th><th><I>a*b a与b之间可以有任意长度的任意字符，也可以一个也没有，如：aabcb，axyzb，a012b，ab.</I></th></tr><tr><th><I>？</I></th><th><I>匹配任意字符</I></th><th><I>a？b a与b之间必须也只能由一个字符，可以是任意字符，如aab，abb，acb，a0b.</I></th></tr><tr><th><I>[list]</I></th><th><I>匹配list中的任意单一字符</I></th><th><I>a[xyz]b a与b之间必须也只能有一个字符，但只能是x或y或z，如axb，ayb，azb. </I></th></tr><tr><th><I>[！list]</I></th><th><I>匹配除list中的任意单一字符</I></th><th><I>a[！0-9]b a与b之间必须也只能有一个字符，但不能是除阿拉伯数字.</I></th></th><tr><th><I>[c1-c2]</I></th><th><I>匹配c1-c2中的任意单一字符如：[0-9]</I></th><th><I>a[0-9]b 0-9之间必须也只能有一个字符，如a0b，a1b，a2b…a9b.</I></th></tr><tr><th><I>{string1,string2,…}</I></th><th><I>匹配string1或者string2（或者更多）其一字符串</I></th><th><I>a{abc，xyz，123}b a与b之间只能是abc或xyz或123 这三个字符串之一.</I></th></tr></table><p>注：此处的 * 和正则中 * 的区别，正则中 * 始终出现在命令的参数部分。</p><p>比如 ls * 中的* 代表的是通配符，而`grep ‘.*’/etc/passwd` 代表正则。</p>思考：`mkdir –pv /tmp/{a，b}/{1，2，3}`一共创建了多少个文件？[：digit：] 在这里任然适用查看一个文件名为数字文件ls –lh `[[：digit：]]`<h3> 二． 设定变量。</h3><pre><code>1〉变量名=值</code></pre><p>格式的要求“开头必须是字母或者下划线”，“&#x3D;两边不能有空格”</p><pre><code>2〉取消变量unset 变量名</code></pre><p>举例：</p><pre><code>[root@localhost ~]# b=123 [root@localhost ~]# a=hello[root@localhost ~]# echo $ahello[root@localhost ~]# echo $b123[root@localhost ~]# unset a[root@localhost ~]# echo $a[root@localhost ~]#</code></pre><p>在其他编程语言中需要区分变量类型，在shell中是不区分的，拿以上变量来说都是一个变量。</p><h3>三.变量的工作范围</h3><p>设定一个变量在什么样一个范围内会生效，在什么时候继承下去。</p>举例：<pre><code>[root@localhost ~]# a=123[root@localhost ~]# bash[root@localhost ~]# echo $a<p>[root@localhost ~]#<br></code></pre> </p><p>bash命令是在当前的进程产生一个子进程。</p><p>父bash `a=123`</p><p>子进程bash 在子进程中父进程的变量不生效。所以以上例子中没</p><p>通过pstree命令可以看出整个过程。最顶端的那个进程为init，init为所有进程的父进程</p><pre><code>[root@localhost ~]# pstreeinit─┬─acpid     ├─atd     ├─auditd─┬─audispd───&#123;audispd&#125;     │        └─&#123;auditd&#125;     ├─automount───4*[&#123;automount&#125;]     ├─avahi-daemon───avahi-daemon     ├─crond     ├─cupsd     ├─dbus-daemon───&#123;dbus-daemon&#125;     ├─2*[dhclient]     ├─events/0     ├─gam_server     ├─gpm     ├─hald───hald-runner─┬─hald-addon-acpi     │                    ├─hald-addon-keyb     │                    └─hald-addon-stor     ├─hcid     ├─hidd     ├─httpd───10*[httpd]     ├─khelper     ├─klogd     ├─krfcommd     ├─ksoftirqd/0     ├─kthread─┬─aio/0     │         ├─ata/0 .....</code></pre><p>在当前shell中打开一个shell，使用bash命令。退出子shell，使用exit.</p><p>变量只在当前生效：</p><pre><code>[root@localhost ~]# a=123[root@localhost ~]# bash[root@localhost ~]# echo $a<p>[root@localhost ~]#<br></code></pre> </p><p>变量继承，在所有子进程中生效。export 命令向下影响所有的子进程。</p>举例：<pre><code>[root@localhost ~]# a=123[root@localhost ~]# export a[root@localhost ~]# bash[root@localhost ~]# echo $a123[root@localhost ~]#</code></pre>*系统变量和环境变量<p>set 返回结果包含环境变量和局部变量。</p><p>env 返回结果包含环境变量。</p><pre><code>[root@localhost ~]# setBASH=/bin/bashBASH_ARGC=()BASH_ARGV=()BASH_LINENO=()BASH_SOURCE=()BASH_VERSINFO=([0]="3" [1]="2" [2]="25" [3]="1" [4]="release" [5]="i686-redhat-linux-gnu")BASH_VERSION='3.2.25(1)-release'COLORS=/etc/DIR_COLORSCOLUMNS=168CVS_RSH=sshDIRSTACK=()EUID=0GROUPS=()G_BROKEN_FILENAMES=1HISTFILE=/root/.bash_historyHISTFILESIZE=1000HISTSIZE=1000HOME=/rootHOSTNAME=localhost.localdomainHOSTTYPE=i686IFS=$' \t\n'INPUTRC=/etc/inputrcLANG=zh_CN.UTF-8LESSOPEN='|/usr/bin/lesspipe.sh %s'.....</code></pre><pre><code>[root@localhost ~]# envHOSTNAME=localhost.localdomainSHELL=/bin/bashTERM=linuxHISTSIZE=1000SSH_CLIENT=172.16.10.101 55656 22SSH_TTY=/dev/pts/0USER=rootLS_COLORS=no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:PATH=/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/binMAIL=/var/spool/mail/rootPWD=/rootINPUTRC=/etc/inputrca=123LANG=zh_CN.UTF-8HOME=/rootSHLVL=4LOGNAME=rootCVS_RSH=sshSSH_CONNECTION=172.16.10.101 55656 172.16.10.104 22LESSOPEN=|/usr/bin/lesspipe.sh %sG_BROKEN_FILENAMES=1_=/bin/env[root@localhost ~]#</code></pre><p>所谓系统变量：自己定义的一个变量就是系统变量。</p><p>环境变量:通过env返回的结果为环境变量。</p><p>以下四个变量的执行顺序是怎么排列：</p><pre><code>/etc/ profile~/.bash_profile~/.bashrc/etc/bashrc</code></pre><p>分别定义同一个变量不同的返回值。</p><pre><code>/etc/ profile 中定义 a=123~/.bash_profile 中定义 a=234~/.bashrc 中定义 a=345/etc/bashrc a=456</code></pre><p>那么其执行的先后顺序如下:</p><pre><code>/etc/profile/root/.bash_profile/root/.bashrc/etc/bashrc</code></pre><p>登陆shell和非登陆shell</p><p>登陆shell是指当用户登陆系统时所取得的那个shell，通过查找以上四个不同的启动文件来处理其中的命令，bash处理顺序如下：</p>    /etc/profile-----/$home/.bash_profile------/$home/.bashrc-------/etc/bashrc<p>非登陆shell</p><p>`/etc/bashrc` 尽管不是通过bash直接调用，但许多`~/.bashrc`文件调用`/etc/bashrc`。这种设置使得超级用户可以为系统内的非登陆shell建立默认属性。</p><p>`.bashrc`非登陆shell执行`~/.bashrc`文件中的命令，而登陆shell的启动文件（如`.bash_profile`）通常会运行这个文件。这样，登陆shell和非登陆shell都可以运行`.bashrc`中的命令了。</p><p>典型的例子 su 和su –</p><p>su – 登陆shell</p><p>su 非登陆shell</p><p>总结一下shell内置的环境变量有哪些？</p><h3>四． 变量的有意思的用法。</h3><pre><code>[root@localhost ~]# a=[root@localhost ~]# echo $&#123;a:-hello&#125;hello[root@localhost ~]# echo $a[root@localhost ~]#</code></pre><pre><code>[root@localhost ~]# a=123[root@localhost ~]# echo $&#123;a:-hello&#125;123[root@localhost ~]# echo $a123[root@localhost ~]# </code></pre><p>对比，当a没有值得时候，临时使用hello。当a有值的时候输出a的值。</p><p>总结：`${var:-word} `如果var没有值，则临时设定值为`word`</p>***<pre><code>[root@localhost ~]# a=[root@localhost ~]# echo $&#123;a:=hello&#125;hello[root@localhost ~]# echo $ahello[root@localhost ~]# <p></code></pre></p><pre><code>[root@localhost ~]# a=123[root@localhost ~]# echo $&#123;a:=hello&#125;123[root@localhost ~]# echo $a123[root@localhost ~]# </code></pre><p>对比以上，当a没有值的时候，会设定为hello。当a有值时输出a的值。</p><p>总结 ：${var:=word}如果var没有值，设定为word。当var有值输出a的值。</p>***<pre><code>[root@localhost ~]# a=[root@localhost ~]# echo $&#123;a:+hello&#125;<p>[root@localhost ~]# echo $a</p><p>[root@localhost ~]# </p><p></code></pre></p><pre><code>[root@localhost ~]# a=123[root@localhost ~]# echo $&#123;a:+hello&#125;hello[root@localhost ~]# echo $a123[root@localhost ~]# </code></pre><p>对比以上，当a有值时，会临时使用hello，但是值本身不改变。</p><p>总结：${var:+word} 如果var有值，临时设定为word，但是var本身的值不改变。</p>***<pre><code>[root@localhost ~]# a=[root@localhost ~]# echo $&#123;a:?hello&#125;bash: a: hello[root@localhost ~]# <p></code></pre></p><pre><code>[root@localhost ~]# a=123[root@localhost ~]# echo $&#123;a:?hello&#125;123[root@localhost ~]# echo $a123[root@localhost ~]#</code></pre><p>对比以上,如果a没有值，报错，如果a有值打印出a的值；</p><p>总结：${var:?word} 如果var没有值，报错，如果var有值打印出var的值。</p>***<pre><code>[root@localhost ~]# a=hello[root@localhost ~]# echo $&#123;a:0&#125;hello[root@localhost ~]# echo $&#123;a:1&#125;ello[root@localhost ~]# echo $&#123;a:2&#125;llo[root@localhost ~]# echo $&#123;a:3&#125;lo[root@localhost ~]# echo $&#123;a:4&#125;o[root@localhost ~]# </code></pre><pre><code>[root@localhost ~]# a=hello[root@localhost ~]# echo $&#123;a:1:3&#125;ell[root@localhost ~]#<p></code></pre></p><p>对比以上</p><p>总结：${var:offset}从变量offset位置开始，输出到结束</p><p>$(var:offset：length)从变量offset开始，输出length</p>***<pre><code>[root@localhost ~]# a=/usr/bin/bash[root@localhost ~]# echo $&#123;a%/*&#125;/usr/bin[root@localhost ~]# <p></code></pre></p><pre><code>[root@localhost ~]# a=/usr/bin/bash[root@localhost ~]# echo $&#123;a%%/*&#125;  [root@localhost ~]#</code></pre><p>从a的值的结尾开始往前数，进行最小匹配，删除匹配部分。返回的是`/usr/bin`</p><p>从a的值的结尾开始往前数，进行最大的匹配，并删除匹配的部分，那么返回值为空</p><p>总结：${var%模式}从尾部开始，进行最小匹配,,然后删除匹配部分。</p><p>${var%%模式}从尾部开始，进行最大匹配，然后删除匹配部分。</p>***<pre><code>[root@localhost ~]# a=/usr/bin/bash[root@localhost ~]# echo $&#123;a#/*&#125;   usr/bin/bash[root@localhost ~]# <p></code></pre></p><pre><code>[root@localhost ~]# a=/usr/bin/bash[root@localhost ~]# echo $&#123;a##/*&#125;  [root@localhost ~]# </code></pre><p>以`/`分割，从左开始第一个/之前的部分（包括/）匹配，那么删除之前的部分。</p><p>以`/`为分割，从左开始第一个直到结尾最后一个/的内容最大匹配，那么删除之前的部分。</p><p>总结：`${var#模式}`从头部开始，进行最小匹配，然后删除匹配部分。</p><p>`${var##模式}`从头部开始，进行最大匹配，然后删除匹配部分。</p>***<pre><code>[root@localhost ~]# a=nalmelaminceaneak[root@localhost ~]# echo $]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;第二节可爱的变量&lt;/h2&gt;
&lt;p&gt;知止，知道正则在什么时候停止。&lt;/p&gt;
&lt;p&gt;&lt;I&gt;知止而后能定，定而后能静，静而后能安，安而后能虑，虑而后能得。
                                    &lt;br&gt;&amp;copy;语出&lt;/I&gt;《大学》&lt;/p&gt;
</summary>
      
    
    
    
    <category term="shell" scheme="https://me.seraphs.blog/categories/shell/"/>
    
    <category term="script" scheme="https://me.seraphs.blog/categories/shell/script/"/>
    
    
    <category term="SHELL" scheme="https://me.seraphs.blog/tags/SHELL/"/>
    
    <category term="编程" scheme="https://me.seraphs.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Shell-cookbook-04</title>
    <link href="https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook04/"/>
    <id>https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook04/</id>
    <published>2015-04-10T01:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<h2>第三节简单明了的输入输出.</h2><pre><code>echoprintfcatteeread</code></pre><p>Fd重点！！！</p><p>echo作用：主要用于输入，用在显示上。</p><p>echo用法：</p><p>语   法：<code>echo [-ne][字符串]</code>或 <code>echo [--help][--version]</code></p><p>补充说明：echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开, 并在最后加上换行号.</p><pre>参   数：-n 不要在最后自动换行       -e 若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：     \a 发出警告声；     \b 删除前一个字符；     \c 最后不加上换行符号；     \f 换行但光标仍旧停留在原来的位置；     \n 换行且光标移至行首；     \r 光标移至行首，但不换行；     \t 插入tab；\v 与\f相同；     \\ 插入\字符；     \nnn 插入nnn（八进制）所代表的ASCII字符；--help 显示帮助--version 显示版本信息</pre>举例<code>echo -e "\033[32;49;1m [DONE] \033[39;49;0m"</code>或<code>echo -e "\e[32;49;1m [DONE] \033[39;49;0m"</code><p>输出结果 ：<code>[DONE]</code></p><p>文本终端的颜色可以使用“ANSI非常规字符序列”来生成。</br>举例：</p><pre><code>echo -e "\033[44;37;5m ME \033[0m COOL"</code></pre><p>以上命令设置背景成为蓝色，前景白色，闪烁光标，输出字符“ME”，然后重新设置屏幕到缺省设置，输出字符 “COOL”。“e”是命令 echo 的一个可选项，它用于激活特殊字符的解析器。“\033”引导非常规字符序列。“m”意味着设置属性然后结束非常规字符序列，这个例子里真正有效的字符是 “44;37;5” 和“0”。修改“44;37;5”可以生成不同颜色的组合，数值和编码的前后顺序没有关系。可以选择的编码如下所示：</p>编码 颜色/动作<pre>0 重新设置属性到缺省设置1 设置粗体2 设置一半亮度（模拟彩色显示器的颜色）4 设置下划线（模拟彩色显示器的颜色）5 设置闪烁7 设置反向图象22 设置一般密度24 关闭下划线25 关闭闪烁27 关闭反向图象30 设置黑色前景31 设置红色前景32 设置绿色前景33 设置棕色前景34 设置蓝色前景35 设置紫色前景36 设置青色前景37 设置白色前景38 在缺省的前景颜色上设置下划线39 在缺省的前景颜色上关闭下划线40 设置黑色背景41 设置红色背景42 设置绿色背景43 设置棕色背景44 设置蓝色背景45 设置紫色背景46 设置青色背景47 设置白色背景49 设置缺省黑色背景</pre><h3>其他有趣的代码还有：</h3><pre>\033[2J 　清除屏幕\033[0q 　关闭所有的键盘指示灯\033[1q 　设置“滚动锁定”指示灯 (Scroll Lock)\033[2q 　设置“数值锁定”指示灯 (Num Lock)\033[3q 　设置“大写锁定”指示灯 (Caps Lock)\033[15:40H 把关闭移动到第15行，40列\007 　　发蜂鸣生beep</pre><p>RedHat的字体和背景颜色的改变方法：</p><p>命令：<pre><code>PS1="[\e[32;1m\u@\h \W]\\$"</code></pre>或</br><code>export PS1="[\e[32;1m\u@\h \W]\\$"</code> 两者的区别请查看环境变量的相关资料</p>解释：<p><code>\e[32;1m：</code>这就是控制字体和背景颜色的转义字符，30<del>37是字体颜色、40</del>47是背景颜色</p><p>例子中的32;1m数字的位置是可以对调的如\e[1;32m，如果是在X环境下可以更换一下1的范围0~10，可能有的没用处：0或者不写（\e[0;32m或\e[;32m）显示浅颜色，1：显示高亮 4：加下划线.....如果改后的效果不好，但是又还原不了，那就不写m前面的数字，如\e[32;m，或者直接注销再登陆</p> <h3>\u \h \W：这是一些转义字符，下面详细解释：</h3> <pre>    \d ：代表日期，格式为weekday month date，例如："Mon Aug 1"    \H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux    \h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略    \t ：显示时间为24小时格式，如：HH：MM：SS    \T ：显示时间为12小时格式    \A ：显示时间为24小时格式：HH：MM    \u ：当前用户的账号名称    \v ：BASH的版本信息    \w ：完整的工作目录名称。家目录会以 ~代替    \W ：利用basename取得工作目录名称，所以只会列出最后一个目录    \# ：下达的第几个命令    \$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$    \n ：新建一行</pre>字体并不局限于一个颜色，可以有多个颜色：<code>PS1="[\e[32;1m\u@\e[35;1m\h \e[31;1m\W]\\$"</code><p>以上两个命令在注销后再登陆就失效了，用下面方法使其永久生效：</p><code>vi /etc/profile</code>在<code>“export PATH .....”</code>下面添加一行：<code>export PS1="[\e[32;1m\u@\h \W]\\$"`</code><p>注销再登陆，就成功了，如果没生效，使用source /etc/profile 命令试试，或者直接重启机器。</p><p>有些时候，需要为Linux服务的配置截个图，然后打印出来，结果在字符界面下就只有黑色背景，白色字体，打印出来费墨~~改改背景可能好点。</p><p>首先要知道在linux中，一些常用的颜色代码：(这些颜色是ANSI标准颜色)</p><p>前景色：30黑 31红 32绿 33黄 34蓝 35紫 36青 37白</p><p>背景色：40黑 41红 42绿 43黄 44青 45蓝 46青 47白</p>前景颜色各数字是对应背景颜色减去10.<p>命令：</p>  <pre><code>echo -e "\033[background_number;foreground_numberm" </code></pre><p>如设置白色背景黑色前景字体应该是</p>  <pre><code>echo   -e   "\033[47;30m"</code></pre><p>foreground_number=前景色</p><p>m要紧跟foreground_number，没有空格。</p><p>（说是白色背景，黑色字体。字体颜色我同意，可背景色咋看也不像是白色呀？o(∩_∩)o...）<p>\033   即退出键<esc>的ascii码(27),所以上面的命令也可写成如下形式</p><pre><code>echo   "^[[47;30m"</code></pre>       <p>其中的“^[”是先按ctrl-V,然后再按<esc>键（就是键盘左上角的键）产生的。</p><p>这种方法只能暂时改变一下，logout一下就没有了。不过可以vi /root/.bashrc, 在后面加上刚才的命令。</p><pre><code>echo -e '\033[47;30m'</code></pre><p>用的是终端控制字符，比如这个，就是光标跳到第60列，然后显示一个OK</p><pre><code>echo -en '\033[60G' && echo OK</code></pre><p>\033[就是终端转义字符开始，60G是命令。</p>echo的-e选项就是让echo不自己处理终端转义字符<p>内建命令echo 输出他的参数，以空格来分隔，以换行符来结束。返回值总为0。echo 使用的一些选项：</p><pre>-e:转义反斜杠字符。-n:禁止换行。</pre><p>echo 命令使用的转义序列</p><p>序列 意义</p><pre>\a 闹铃\b 退格\c 强制换行\e 退出\f 清除屏幕\n 新行\r Carriage return.\t 水平制表符\v 垂直制表符\\ 反斜杠$#传递到脚本的参数个数$*传递到脚本的参数，与位置变量不同，此选项参数可超过9个$$脚本运行时当前进程ID号，常用作临时变量的后缀。如hash.$$$!后台运行的&最后一个进程的ID号$@与$#相同，使用时加引号，并在引号中返回参数的个数 $-上一个命令的最后一个参数$?最后命令的推出状态，0表示没有错误。其他任何值表示有错误。echo 输出颜色需要恢复到之前，那么使用reset</pre><p>printf 命令</p> <p>用途 </p></p>写格式化输出。 </p><p>语法</p> <pre>printf Format [ Argument  ... ] </pre></p>描述:</p> <p>printf命令转换、格式化并写 Argument参数到标准输出。Argument参数是由 Format参数控制格式化的。格式化输出行不能超出 LINE_MAX字节长度。</p><p>下列环境变量影响 printf命令的执行：</p> LANG <p>在 LC_ALL和相应的环境变量（以 LC_开头）没有指定语言环境时，确定语言环境编目使用的语言环境。</p>LC_ALL <p>确定用于覆盖由 LANG或其它任何 LC_环境变量设置的任何语言环境编目值的语言环境。</p>LC_CTYPE <p>确定把文本字节数据顺序解释为字符的语言环境；例如，单一字节对应多字节字符的参数。</p>LC_MESSAGES <p>确定写消息使用的语言。</p>LC_NUMERIC <p>确定数字格式编排的语言环境。此环境变量影响使用 e、E、f、g和 G转换字符编写的数字的格式。</p><pre>*Format参数是包含三种对象类型的一个字符串： *无格式字符复制到输出流。 *转换规范，每个规范导致在值参数列表中检索 0 个或更多个项。*以下转义序列。在复制到输出流时，这些序列导致它们的相关操作在有此功能的设备上显示：        // 反斜杠        \a 警告        \b 退格        \f 换页        \n 换行        \r 回车        \t 跳格         \v 垂直跳格        \ ddd ddd是 1、2 或 3 位八进制数字。这些转义序列作为由八进制数指定的具有数字值的字节显示。</pre><p>Argument参数是一个或多个字符串的列表，它在 Format参数的控制下被写到标准输出。</p> <p>Format参数在必要的情况下会经常重新使用以满足 Argument参数。将好像提供了空字符串 Argument一样评估任何额外的 c 或者 s 转换规范；其它额外转换规范将好像提供了 0 Argument一样评估。此处 Format参数不包含转换规范仅出现 Argument参数，结果是不确定的。</p><p>每个 Format参数中的转换规范都具有如下顺序的语法：</p> <pre>1. % （百分号）。2. 零或更多的选项，修改转换规范的含义。选项字符和它们的含义是：　　- 转换结果在字段中左对齐。　　+ 符号转换结果常以符号（+ 或者 -）开始。　　空格如果符号转换的第一个字符不是符号，结果的前缀将是空格。如果空格和 + 选项字符都显示，则忽略空格选项字符。　　# 此选项指定值转换到备用格式。对于 c、d、i, u 和 s 转换，选项没有作用。对于 o 转换，它增加精度来强制结果的第一数字是 a、0（零）。对于 x 和 X 转换，非零结果分别具有 0x 或 0X 前缀。对于 e、E、 f、g 和 G 转换，结果通常包含基数字符，即使基数字符后没有数字。对于 g 和 G 转换，结尾零不象通常一样除去。　　0 对于 d、i、o、 u、x、e、 E、f、g 和 G 转换，前导零（跟在符号或底数的后面）用于填充字段宽度，将不用空格填充。如果显示 0（零）和 -（减号）选项，0（零）选项被忽略。对于 d、i、o、u、x 和 X 转换，如果指定精度，0（零）选项将被忽略。　　注:　　其它转换，没有定义其行为。　　3. 可选的指定最小值字段宽度的十进制数字字符串。如果转换值字符少于字段宽度，该字段将从左到右按指定的字段宽度填充。如果指定了左边调整选项，字段将在右边填充。如果转换结果宽于字段宽度，将扩展该字段以包含转换后的结果。不会发生截断。然而，小的精度可能导致在右边发生截断。　　4. 可选的精度。精度是一个．（点）后跟十进制数字字符串。如果没有给出精度，按 0（零）对待。精度指定：　　* d、o、i、 u、x 或 X 转换的最少数字显示位数。　　* e 和 f 转换的基数字符后的最少数字显示位数。　　* g 转换的最大有效数字位数。　　* s 转换中字符串的最大打印字节数目。　　5. 指示要应用的转换类型的一个字符，例如：　　% 不进行转换。打印一个 %（百分号）。　　d, i 接受整数值并将它转换为有符号的十进制符号表示法。精度指定显示的最小数字位数。如果值转换后可以用更少的位数来表示，将使用前导零扩展。缺省精度是 1。精度为零的零值转换的结果是空字符串。用零作为前导字符来指定字段宽度，导致用前导零填充字段宽度值。　　o 接受整数值并将它转换为有符号的八进制符号表示法。精度指定显示的最小数字位数。如果值转换后可以用更少的位数来表示，将使用前导零扩展。缺省精度是 1。精度为零的零值转换的结果是空字符串。用零作为前导字符来指定字段宽度，导致用前导零填充字段宽度值。不用八进制值表示字段宽度。　　u 接受整数值并将它转换为无符号的十进制符号表示法。精度指定显示的最小数字位数。如果值转换后可以用更少的位数来表示，将使用前导零扩展。缺省精度是 1。精度为零的零值转换的结果是空字符串。用零作为前导字符来指定字段宽度，导致用前导零填充字段宽度值。　　x, X 接受整数值并将它转换为十六进制符号表示法。字母 abcdef 用于 x 转换，字母 ABCDEF 用于 X 转换。精度指定显示的最小数字位数。如果值转换后可以用更少的位数来表示，将使用前导零扩展。缺省精度是 1。精度为零的零值转换的结果是空字符串。用零作为前导字符来指定字段宽度，导致用前导零填充字段宽度值。　　f 接受浮点或者双精度值并将它转换为十进制符号表示法，格式为 [-] ddd.ddd。基数字符（在这里显示为十进制点）后的数字位数等于规定的精度。 LC_NUMERIC 语言环境编目确定在这个格式中使用的基数字符。如果不指定精度，则输出六个数字。如果精度是 0（零），将不显示基数字符。　　e, E 接受浮点或者双精度值并将它转换为指数表示的形式 [-] d.dde{+|-}dd。在基数字符前有一个数字（在这里显示为十进制点），基数字符后的数字位数等于规定的精度。 LC_NUMERIC 语言环境编目确定在这个格式中使用的基数字符。如果不指定精度，则输出六个数字。如果精度是 0（零），将不显示基数字符。E 转换字符在指数前生成带 E 而不是带 e 的数字。指数通常至少包含两个数字。然而，如果要打印的指数值大于两个数字，必要时需要打印附加指数数字。　　g、G 接受浮点和双精度值并转换为 f 或 e 转换字符的样式（或在 G 转换的情况下是 E），用精度指定有效数字的个数。尾零将从结果中除去。基数字符只有在其后是数字时显示。使用的样式取决于转换的值。样式 g 仅在转换的指数结果小于 -4，或大于或等于精度时使用。　　c 接受值将其作为字符串并打印字符串中的第一个字符。　　s 接受值将其作为字符串并打印字符串中的字符直到字符串结束或者达到精度指示的字符个数。如果没有指定精度，打印全部字符直到出现第一个空字符。　　b 接受值将其作为字符串，可能包含反斜杠转义序列。打印来自转换字符串的字节直到字符串结束或者达到精度规范指示的字节数。如果没有指定精度，打印全部字节直到出现第一个空字符。　　支持下列反斜杠转义序列：　　* 先前列出的反斜杠转义序列在 Format 参数描述下。这些转义序列将被转换到它们表示的单个字符。　　* \c（反斜杠 c）序列，它不显示并使 printf 命令忽略 Format 参数中的字符串参数包含的剩余的所有字符串，所有剩余的字符串参数和所有附加字符。</pre><p>退出状态 <p><p>该命令返回以下出口值： <p>0 <p>成功完成。</p>\>0 <p>发生错误。</p> </p>示例 </p>1. 输入下列命令：<pre><code>printf "%5d%4d\n" 1 21 321 4321 54321</code></pre>产生下列输出： <pre><code>   1  21  321432154321   0 </code></pre><p>三次使用 Format参数打印所有给定字符串。0（零）由 printf命令提供以满足最后的 %4d 转换规格。</p><ol start="2"><li>输入下列命令 :<pre><code>printf "%c %c/n" 78 79</code></pre></li></ol><p>产生下列输出： </p><pre><code>7 7</code></pre><p> 文件<br><code>/usr/bin/printf </code><br>包含 printf命令</p><p>printf 命令用来定制输出。</p><p>举例：</p><pre><code>[root@localhost shell]# printf "%10d%10d\n" 1 1 3 4 2                 1         1         3         4         2         0[root@localhost shell]# printf "%5s%5s\n" 1 21 321 4321 54321 sss    1   21  321 432154321  sss[root@localhost shell]#      <p>[root@localhost shell]# printf “%5d%5d\n” 1 21 321 4321 54321<br>    1   21<br>  321 4321<br>54321    0<br>[root@localhost shell]#<br></code></pre></p><p>观察以上输出的结果。提示输出的时候看显示的位数和定制位数的关系。</p><p>tee 命令：读取标准输入的数据，并将内容打印出来，生成文件。</p><p><code>tee file</code></p><p>如果文件不存在则创建，存在则覆盖。</p><pre><code>[root@localhost shell]# cat ip | tee ip.bak172.16.8.8 172.16.9.9 [root@localhost shell]#</code></pre><code>tee -a</code><p>输出到标准输出的同时，追加到文件file中。如果文件不存在，则创建；如果已经存在，就在末尾追加内容，而不是覆盖。</p><pre><code>[root@localhost shell]# cat ip.bak172.16.8.8 172.16.9.9 172.16.8.8 172.16.9.9 [root@localhost shell]# cat ip | tee -a ip.bak172.16.8.8 172.16.9.9 [root@localhost shell]# cat ip.bak 172.16.8.8 172.16.9.9 172.16.8.8 172.16.9.9 172.16.8.8 172.16.9.9 [root@localhost shell]#</code></pre><code>tee -</code><p>重复输出字符串。后面跟多少个- 代表在本身输出的基础上加一次。看下面两个例子。</p><pre><code>[root@localhost ~]# echo Hello | tee -HelloHello[root@localhost ~]# echo Hello | tee - -HelloHelloHello[root@localhost ~]# echo Hello | tee - - -HelloHelloHelloHello[root@localhost ~]#</code></pre><pre><code>[root@localhost ~]# echo -n Hello | tee -HelloHello[root@localhost ~]# echo -n Hello | tee - -HelloHelloHello[root@localhost ~]# echo -n Hello | tee - - -HelloHelloHelloHello[root@localhost ~]# </code></pre><p>read 命令：</p><pre>1.基本读入2.计时读入3.默读（不显示在屏幕上）</pre><p>这里只介绍基本读入，计时读入</p><p>基本读入:</p><p>接收标准输入（键盘）的输入，或其他文件描述符的输入,得到输入后，read命令将数据放入一个标准变量中。</p><p>简单的示例脚本：</p><pre><code>#!/bin/bashecho -n "Please input your name:"  //输入提示信息read name//读取输入，并赋给一个标准变量。echo "Hello $name , welcome to my system" //打印出结果exit 0  //退出shell程序。</code></pre><p>read 本身内置了提示功能，加 -p参数即可实现上面的内容。</p><pre><code>#!/bin/bashread -p "Please input your name:" name  echo "Hello $name , welcome to my system" echo Thank you "$name ! "exit 0</code></pre><p>注意这里的read部分最后一个name前面的空格。可以认为 -p “”是一个部分 read name是一个部分</p><p>计时读入：</p><p>使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据</p><p>脚本都必须继续执行，那么可以使用-t选项指定一个 计时器。-t选项指定read命令等待输入的秒数。</p><p>当计时满时，read命令返回一个非零退出状态;</p> <pre><code>#!/bin/bash if read -t 5 -p "please enter your name:" name then      echo "hello $name ,welcome to my script" else     echo "sorry,too later！" fi exit 0 </code></pre> <p>其他参数：</p><p> -n参数限制字符输入，超过-n 指定的字符数，自动跳出。</p><pre><code>[root@localhost shell]# read -n 5 -p "Enter you choice :" choiceEnter you choice :hello[root@localhost shell]# </code></pre><p>-s 参数隐藏你的输入。</p><pre><code>[root@localhost shell]# read -s -p "Enter your number:" numberEnter your number:[root@localhost shell]# echo $number123456[root@localhost shell]#  </code></pre><p>在numuber后面输入内容是不显示的。</p><p>安全终端：stty 通过一个脚本来演示：</p><pre><code>#!/bin/bashecho "Enter you password:"stty -echoread passwordecho your password is "$password"stty echo</code></pre><p>执行过程：</p><pre><code>[root@localhost shell]# sh sh7.sh Enter you password:your password is testtest</code></pre><p>文件的非交互式读取：</p><p>举例1：</p><pre><code>#!/bin/bashwhile read ip;do        ping -c 1 $ipwaitdone</root/shell/ip</code></pre><p>注：wait是父进程等待子进程运行完成之后再启新的进程。</p><p>执行结果:</p><pre><code>[root@localhost shell]# sh sh8.sh PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.017 ms<p>— 127.0.0.1 ping statistics —<br>1 packets transmitted, 1 received, 0% packet loss, time 0ms<br>rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.017&#x2F;0.017&#x2F;0.017&#x2F;0.000 ms<br>PING 172.16.56.1 (172.16.56.1) 56(84) bytes of data.<br>64 bytes from 172.16.56.1: icmp_seq&#x3D;1 ttl&#x3D;255 time&#x3D;1.21 ms</p><p>— 172.16.56.1 ping statistics —<br>1 packets transmitted, 1 received, 0% packet loss, time 0ms<br>rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 1.218&#x2F;1.218&#x2F;1.218&#x2F;0.000 ms<br>[root@localhost shell]#<br></code></pre></p><p>举例2：用来操作两个变量</p><pre><code>#!/bin/bashwhile read ip1 ip2do        echo "one:$ip1 two:$ip2"done</root/shell/ip</code></pre><p>执行结果：</p><pre><code>[root@localhost shell]# cat ip127.0.0.1 8.8.8.8172.16.56.1 202.106.0.20[root@localhost shell]# sh sh9.sh one:127.0.0.1 two:8.8.8.8one:172.16.56.1 two:202.106.0.20[root@localhost shell]#</code></pre><p>总结一下read：</p><pre>1.需要人参与的输入2.不需要人参与的输入</pre><p>输入输出重定向：</p><p>清空你将要导入对象的内容并写入 >前面命令的执行结果。</p><p>举例：</p><pre><code>[root@localhost shell]# cat ip172.16.6.6 [root@localhost shell]# printf "172.16.8.8 \n" > ip  [root@localhost shell]# cat ip172.16.8.8 [root@localhost shell]#</code></pre><p>\>> 追加到你将要导入的对象的结尾，不改变对象本身的内容，把>>前面命令执行的结果写入。</p>举例：<pre><code>[root@localhost shell]# cat ip172.16.8.8 [root@localhost shell]# printf "172.16.9.9 \n" >> ip  [root@localhost shell]# cat ip172.16.8.8 172.16.9.9 [root@localhost shell]#</code></pre><p>< 读取文件内容，更多的时候为避免人为的书写。</p>举例：<code>[root@localhost ~]# cat < shell/ip 172.16.8.8 172.16.9.9 [root@localhost ~]# </code><p>&lt;&lt;读取内容到指定的字符出现。</p><p>举例：</p><pre><code>[root@localhost shell]# cat ip &lt;&lt;EOF &gt;ip.bak> EOF[root@localhost shell]# cat ip.bak 172.16.8.8 172.16.9.9 [root@localhost shell]# cat &lt;&lt;EOF  &gt;file1> look ! very beautiful !> yes !> I kown !> EOF[root@localhost shell]# cat file1 look ! very beautiful !yes !I kown ![root@localhost shell]#</code></pre><p>以上的EOF是可以自定义的。</p>举例：<pre><code>[root@localhost shell]# cat &lt;&lt;MZNH&gt;file2 Hello ! meizi! Hi boy ! can I help you ? yes! let't go my home..... MZNH[root@localhost shell]# cat file2 Hello ! meizi!Hi boy !can I help you ?yes!let't go my home.....[root@localhost shell]#</code></pre><p>从<<开始直到遇到MZNH结束交互。</p><p> | 管道：将第一条命令的输出，作为第二条命令的输入</p><code>command1 | command2</code><p>经常配合xargs使用：</p><pre><code>[root@localhost shell]# echo a b c | xargs -n 1abc[root@localhost shell]# echo a b c | xargs -n 3a b c[root@localhost shell]# echo a b c | xargs -n 2a bc[root@localhost shell]# </code></pre><p>tac 命令：反过来查看一个文件。其他用法自己研究一下。</p><pre><code>[root@localhost shell]# cat file2 Hello ! meizi!Hi boy !can I help you ?yes!let't go my home.....[root@localhost shell]# tac file2 let't go my home.....yes!can I help you ?Hi boy !Hello ! meizi![root@localhost shell]# </code></pre><p>（）合并输出：</p><pre><code>[root@localhost shell]# cat file1 ; cat file2 >> file3look ! very beautiful !yes !I kown ![root@localhost shell]# cat file3 Hello ! meizi!Hi boy !can I help you ?yes!let't go my home.....[root@localhost shell]# (cat file1 ; cat file2)>file4[root@localhost shell]# cat file4 look ! very beautiful !yes !I kown !Hello ! meizi!Hi boy !can I help you ?yes!let't go my home.....[root@localhost shell]# </code></pre><p>文件描述符：</p> <p>>前面的2代表的是错误的输出。>前面1代表的是错误的输出。</p><pre><code>[ITnihao@localhost ~]$ find / -name passwd 2&gt;/tmp/err/selinux/class/passwd/selinux/class/passwd/perms/passwd/usr/bin/passwd/etc/pam.d/passwd/etc/passwd[ITnihao@localhost ~]$ find / -name passwd 1&gt;/tmp/rigfind: “/root”: 权限不够find: “/lost+found”: 权限不够find: “/home/think”: 权限不够find: “/home/zabbix”: 权限不够find: “/usr/lib64/audit”: 权限不够find: “/etc/selinux/targeted/modules/active”: 权限不够find: “/etc/sudoers.d”: 权限不够find: “/etc/polkit-1/localauthority”: 权限不够find: “/etc/audisp”: 权限不够............</code></pre><p>思考：查看一个系统中没有的文件。echo $?的返回值是多少？</p><pre><code>[root@localhost ~]# ls /etc/chaojihuails: 无法访问/etc/chaojihuai: 没有那个文件或目录[root@localhost ~]# echo $?[root@localhost ~]# ls /etc/chaojihuails: /etc/chaojihuai: 没有那个文件或目录[root@localhost ~]# ls /etc/chaojihuai 2>&1 | grep --color "没有"ls: /etc/chaojihuai: 没有那个文件或目录[root@localhost ~]# </code></pre><p>总结以上可以看出：错误的信息是不经过管道的。备注：由于代码没有找到高亮方法，这里grep --color 输出的结果中的“没有”应该是红色的。</p><hr><p>在linux中每启动一个程序或者脚本，都会在系统/proc/下产生一个与PID该名字相对应的目录，这个目录下有个目录叫fd存放与之相关的文件描述符。</p><pre><code>#!/bin/bashecho "the shell pid $$"ls -l /proc/$$/fd/echo "sleep 3s"sleep 3echo "link 4 -> /tmp/fdtestwrite"exec 4> /tmp/fdtestecho "list current fd"ls -l /proc/$$/fd/sleep 3cat /etc/passwd >&4sleep 3echo "close /tmp/fdtest"exec 4>&-echo "list current fd"ls -l /proc/$$/fd/echo "sleep 3s"sleep 3echo "link 5 -> /tmp/fdtestread"exec 5< /tmp/fdtestecho "list current fd"ls -l /proc/$$/fd/sleep 3echo "read file from fd5, exec grep command"grep 'root' <&5sleep 3echo "close /tmp/fdtest"exec 5<&-echo "list current fd"ls -l /proc/$$/fd/sleep 3</code></pre><pre>*exec 文件描述符> 建立关系文件 ，以读的形式建立关系。*exec 文件描述符>&- 取消建立关系。*exec 文件描述符< 以写的形式建立关系。*exec 文件描述符<&- 取消建立的关系。 </pre><p>fd的重要性。</p><p>看一下下面的小例子：</p><pre><code>[root@localhost shell]# ps  PID TTY          TIME CMD20202 pts/3    00:00:00 bash20716 pts/3    00:00:00 ps[root@localhost shell]# ls -l /proc/20202/fd总计 0lrwx------ 1 root root 64 04-02 13:48 0 -> /dev/pts/3lrwx------ 1 root root 64 04-02 14:39 1 -> /dev/pts/3lrwx------ 1 root root 64 04-02 14:39 2 -> /dev/pts/3lrwx------ 1 root root 64 04-02 14:39 255 -> /dev/pts/3[root@localhost shell]# </code></pre>pts指的是终端文件。<pre><code>[root@localhost shell]# echo hello > /dev/pts/3hello[root@localhost shell]# </code></pre><h5>和直接 echo hello的效果是一样的。</h5><p>玩一下两个终端的通信。开启两个终端，查看终端号。</p><p>第一个终端：</p><pre><code>[root@localhost ~]# ps  PID TTY          TIME CMD20732 pts/5    00:00:00 bash20765 pts/5    00:00:00 ps[root@localhost ~]# </code></pre><p>第二个终端：</p><pre><code>[root@localhost shell]# ps  PID TTY          TIME CMD20202 pts/3    00:00:00 bash20768 pts/3    00:00:00 ps[root@localhost shell]#</code></pre><p>在一个终端输入：</p><pre><code>[root@localhost ~]# echo hello > /dev/pts/3[root@localhost ~]# </code></pre><p>查看第二个终端：</p><code>[root@localhost shell]# hello </code><p>他会莫名奇妙打印出一个hello。</p><p>介绍一个命令：lsof </p><p>-d 查看一个文件描述符被那些进程打开了。</p><pre><code>[root@localhost shell]# lsof -d 3 | grep "dev"  udevd       597      root    3u  unix 0xde4e1e40      0t0       1862 socketiscsid     2649      root    3u   CHR        1,3      0t0       1837 /dev/nullrpc.idmap  3277      root    3u   CHR        1,3      0t0       1837 /dev/nullautomount  3464      root    3r   CHR      10,58      0t0      12175 /dev/autofsdbus-laun  3828      root    3u   CHR        1,3      0t0       1837 /dev/nullgconfd-2   3836      root    3u   CHR        1,3      0t0       1837 /dev/null[root@localhost shell]# </code></pre><p>-i 端口被那个进程打开的。</p><pre><code>[root@localhost shell]# lsof -i:22COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEsshd     3499 root    3u  IPv6  12326      0t0  TCP *:ssh (LISTEN)sshd     3499 root    4u  IPv4  12328      0t0  TCP *:ssh (LISTEN)[root@localhost shell]#</code></pre><p>+d 查看这个目录下的文件被那些进程打开。</p><pre><code>[root@localhost shell]# lsof +d /proc  COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF       NODE NAMEvmtoolsd  2510 root   16r   REG    0,3        0 4026531842 /proc/meminfovmtoolsd  2510 root   17r   REG    0,3        0 4026531853 /proc/statvmtoolsd  2510 root   18r   REG    0,3        0 4026531857 /proc/vmstatklogd     3149 root    0r   REG    0,3        0 4026531848 /proc/kmsgXorg      3751 root    6w   REG    0,3        0 4026532156 /proc/mtrrlsof     21064 root    3r   DIR    0,3        0          1 /proc[root@localhost shell]# </code></pre><p>+D 查看这个目录下的文件被那些进程打开，具体到子目录。</p><pre><code>[root@localhost shell]# lsof +D /proc  COMMAND    PID      USER   FD   TYPE DEVICE SIZE/OFF       NODE NAMEvmtoolsd  2510      root   16r   REG    0,3        0 4026531842 /proc/meminfovmtoolsd  2510      root   17r   REG    0,3        0 4026531853 /proc/statvmtoolsd  2510      root   18r   REG    0,3        0 4026531857 /proc/vmstatklogd     3149      root    0r   REG    0,3        0 4026531848 /proc/kmsgacpid     3381      root    3r   REG    0,3        0 4026532165 /proc/acpi/eventhald      3394 haldaemon   11r   REG    0,3        0  222429201 /proc/3394/mountsXorg      3751      root    5u   REG    0,3      256 4026532298 /proc/bus/pci/00/0f.0Xorg      3751      root    6w   REG    0,3        0 4026532156 /proc/mtrrlsof     21066      root    3r   DIR    0,3        0          1 /proclsof     21066      root    6r   DIR    0,3        0 1380581385 /proc/21066/fd[root@localhost shell]#</code></pre><p>-c command 查看这个命令打开了那些文件，这些文件调用的进程。</p><pre><code>[root@localhost shell]# lsof -c lsCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF       NODE NAMElsof    21072 root  cwd    DIR  253,0     4096    4316938 /root/shelllsof    21072 root  rtd    DIR  253,0     4096          2 /lsof    21072 root  txt    REG  253,0   129820    9887131 /usr/sbin/lsoflsof    21072 root  mem    REG  253,0   245376    3271583 /lib/libsepol.so.1lsof    21072 root  mem    REG  253,0    93508    3271584 /lib/libselinux.so.1lsof    21072 root  mem    REG  253,0   130864    3271547 /lib/ld-2.5.solsof    21072 root  mem    REG  253,0  1693820    3271566 /lib/libc-2.5.solsof    21072 root  mem    REG  253,0    20668    3271567 /lib/libdl-2.5.solsof    21072 root  mem    REG  253,0 56417488    9881339 /usr/lib/locale/locale-archivelsof    21072 root    0u   CHR  136,3      0t0          5 /dev/pts/3lsof    21072 root    1u   CHR  136,3      0t0          5 /dev/pts/3lsof    21072 root    2u   CHR  136,3      0t0          5 /dev/pts/3lsof    21072 root    3r   DIR    0,3        0          1 /proclsof    21072 root    4r   DIR    0,3        0 1380974601 /proc/21072/fdlsof    21072 root    5w  FIFO    0,6      0t0     365144 pip</code></pre> <p>lsod找回误删除的文件。</p><p>恢复删除的文件</p><blockquote><p>当 UNIX 计算机受到入侵时，常见的情况是日志文件被删除，以掩盖攻击者的踪迹。管理错误也可能导致意外删除重要的文件，比如在清理旧日志时，意外地删除了数据库的活动事务日志。有时可以恢复这些文件，并且lsof可以为您提供帮助。</p></blockquote><blockquote><p>当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录条目。</p></blockquote><blockquote><p>前面曾在转到 /proc 目录部分中说过，通过在适当的目录中进行查找，您可以访问进程的文件描述符。在随后的内容中，您看到了lsof可以显示进程的文件描述符和相关的文件名。您能明白我的意思吗？</p></blockquote><blockquote></p>但愿它真的这么简单！当您向lsof传递文件名时，比如在`lsof /file/I/deleted`中，它首先使用stat()系统调用获得有关该文件的信息，不幸的是，这个文件已经被删除。在不同的操作系统中，lsof可能可以从核心内存中捕获该文件的名称。清单 5显示了一个 Linux 系统，其中意外地删除了 Apache 日志，我正使用grep工具查找是否有人打开了该文件。</p></blockquote><p>在 Linux 中使用 lsof 查找删除的文件</p><pre><code># lsof | grep error_loghttpd      2452     root    2w      REG       33,2      499    3090660/var/log/httpd/error_log (deleted)httpd      2452     root    7w      REG       33,2      499    3090660/var/log/httpd/error_log (deleted)... more httpd processes ...</code></pre><p>在这个示例中，您可以看到 PID 2452 打开文件的文件描述符为 2（标准错误）和 7。因此，可以在 /proc/2452/fd/7 中查看相应的信息，如下代码：</p><p>通过 /proc 查找删除的文件</p><pre><code># cat /proc/2452/fd/7[Sun Apr 30 04:02:48 2006] [notice] Digest: generating secret for digest authentication[Sun Apr 30 04:02:48 2006] [notice] Digest: done[Sun Apr 30 04:02:48 2006] [notice] LDAP: Built with OpenLDAP LDAP SDK</code></pre><blockquote><p>Linux 的优点在于，它保存了文件的名称，甚至可以告诉我们它已经被删除。在遭到破坏的系统中查找相关内容时，这是非常有用的内容，因为攻击者通常会删除日志以隐藏他们的踪迹。Solaris 并不提供这些信息。然而，我们知道httpd守护进程使用了 error_log 文件，所以可以使用ps命令找到这个 PID，然后可以查看这个守护进程打开的所有文件。</p></blockquote><p>在 Solaris 中查找删除的文件</p><pre><code># lsof -a -p 8663 -d ^txtCOMMAND  PID   USER   FD   TYPE        DEVICE SIZE/OFF    NODE NAMEhttpd   8663 nobody  cwd   VDIR         136,8     1024       2 /httpd   8663 nobody    0r  VCHR          13,2          6815752 /devices/pseudo/mm@0:nullhttpd   8663 nobody    1w  VCHR          13,2          6815752 /devices/pseudo/mm@0:nullhttpd   8663 nobody    2w  VREG         136,8      185  145465 / (/dev/dsk/c0t0d0s0)httpd   8663 nobody    4r  DOOR                    0t0      58 /var/run/name_service_door(door to nscd[81]) (FA:->0x30002b156c0)httpd   8663 nobody   15w  VREG         136,8      185  145465 / (/dev/dsk/c0t0d0s0)httpd   8663 nobody   16u  IPv4 0x300046d27c0      0t0     TCP *:80 (LISTEN)httpd   8663 nobody   17w  VREG         136,8        0  145466/var/apache/logs/access_loghttpd   8663 nobody   18w  VREG         281,3        0 9518013 /var/run (swap)</code></pre><p>我使用-a和-d参数对输出进行筛选，以排除代码程序段，因为我知道需要查找的是哪些文件。Name列显示出，其中的两个文件（FD 2 和 15）使用磁盘名代替了文件名，并且它们的类型为VREG（常规文件）。在 Solaris 中，删除的文件将显示文件所在的磁盘的名称。通过这个线索，就可以知道该 FD 指向一个删除的文件。实际上，查看/proc/8663/fd/15就可以得到所要查找的数据。</p><p>如果可以通过文件描述符查看相应的数据，那么您就可以使用 I/O 重定向将其复制到文件中，如cat /proc/8663/fd/15 > /tmp/error_log。此时，您可以中止该守护进程（这将删除 FD，从而删除相应的文件），将这个临时文件复制到所需的位置，然后重新启动该守护进程。</p><p>对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。正如您所看到的，有些操作系统（以及不同版本的lsof）比其他的系统更容易查找相应的数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;第三节简单明了的输入输出.&lt;/h2&gt;


&lt;pre&gt;&lt;code&gt;echo
printf
cat
tee
read
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fd重点！！！&lt;/p&gt;
&lt;p&gt;echo作用：主要用于输入，用在显示上。&lt;/p&gt;
&lt;p&gt;echo用法：&lt;/p&gt;
&lt;p&gt;语   </summary>
      
    
    
    
    <category term="shell" scheme="https://me.seraphs.blog/categories/shell/"/>
    
    <category term="script" scheme="https://me.seraphs.blog/categories/shell/script/"/>
    
    
    <category term="SHELL" scheme="https://me.seraphs.blog/tags/SHELL/"/>
    
    <category term="编程" scheme="https://me.seraphs.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Shell-cookbook-05</title>
    <link href="https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook05/"/>
    <id>https://me.seraphs.blog/shell/script/2015-04-09-shell-cookbook05/</id>
    <published>2015-04-10T01:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<h2>常用shell</h2><h2>查看TCP连接状态</h2><pre><code>netstat -nat |awk 'NR>2 &#123;print $0&#125;' | awk '&#123;print $6&#125;' | sort | uniq -c | sort -rnnetstat -n | awk '/^tcp/ &#123;++S[$NF]&#125;;END &#123;for(a in S) print a, S[a]&#125;'netstat -n | awk '/^tcp/ &#123;++state[$NF]&#125;; END &#123;for(key in state) print key,"\t",state[key]&#125;'netstat -n | awk '/^tcp/ &#123;++arr[$NF]&#125;;END &#123;for(k in arr) print k,"\t",arr[k]&#125;'netstat -n |awk '/^tcp/ &#123;print $NF&#125;'|sort|uniq -c|sort -rnnetstat -ant | awk '&#123;print $NF&#125;' | grep -v '[a-z]' | sort | uniq -c</code></pre><p> awk 中的 $NF 相当于 $(NF) ($NF 和NF 区别)</p><pre><code>cat passwd | awk -F':' '&#123;print $(NF)&#125;'  // 等价于 cat passwd | awk -F':' '&#123;print $7&#125;'</code></pre><p>示例</p><pre><code>[root@localhost data]# cat passwd | awk -F':' '&#123;print $(NF)&#125;'/bin/bash/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/bin/sync/sbin/shutdown/sbin/halt/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/bin/bash/sbin/nologin/sbin/nologin/bin/sh/bin/bash[root@localhost data]# cat passwd | awk -F':' '&#123;print $NF&#125;'/bin/bash/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/bin/sync/sbin/shutdown/sbin/halt/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/sbin/nologin/bin/bash/sbin/nologin/sbin/nologin/bin/sh/bin/bash[root@localhost data]# </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;常用shell&lt;/h2&gt;

&lt;h2&gt;查看TCP连接状态&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;netstat -nat |awk &#39;NR&gt;2 &amp;#123;print $0&amp;#125;&#39; | awk &#39;&amp;#123;print $6&amp;#125;&#39; | sort | uniq -c </summary>
      
    
    
    
    <category term="shell" scheme="https://me.seraphs.blog/categories/shell/"/>
    
    <category term="script" scheme="https://me.seraphs.blog/categories/shell/script/"/>
    
    
    <category term="SHELL" scheme="https://me.seraphs.blog/tags/SHELL/"/>
    
    <category term="编程" scheme="https://me.seraphs.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix 邮件报警</title>
    <link href="https://me.seraphs.blog/zabbix/email/2015-04-10-zabbix-email/"/>
    <id>https://me.seraphs.blog/zabbix/email/2015-04-10-zabbix-email/</id>
    <published>2015-04-10T01:55:11.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统环境：</p><pre>CentOS 5.5 x84_64位Zabbix版本2.2.3Web服务器：LNMP</pre><p>环境部署，参考其他靠谱文档，建议官方文档，今天我们聊聊zabbix邮件告警的事。项目即监控项，触发器相当于给监控项设置阈值，根据表达式触发触发器，产生报警。关于操作系统CentOS6.0 以下版本都是通过mail命令调用sendmail的sm-client发送邮件，所以如果关闭sendmail按照很多网上的文档是发不出邮件的。</p><p>那么mail命令如果仔细观察的话其实调用的是mailx来调用第三方非本地smpt服务。</p><h2>一.   首先卸载（或停止） senmail升级安装mailx</h2><h4>1)       停止sendmail:</h4><pre><code>[root@localhost ~]# /etc/init.d/sendmail stop[root@localhost ~]# chkconfig sendmail off[root@localhost ~]#</code></pre><h4>2)安装mailx：</h4><pre><code>[root@localhost workplace]# lsmailx-12.4  mailx-12.4.tar.bz2  zabbix-2.2.3  zabbix-2.2.3.tar.gz mailx-12.4-openssl_1.0.0_build_fix-1.patch[root@localhost workplace]# tar -jxf mailx-12.4.tar.bz2 #注意 打patch[root@localhost workplace]#[root@localhost workplace]# cd mailx-12.4[root@localhost workplace]# patch  -Np1 -i mailx-12.4-openssl_1.0.0_build_fix-1.patch[root@localhost mailx-12.4]# make &&  make install UCBINSTALL=/usr/bin/install</code></pre><p>如果碰到错误自行解决.</p><h4>3)       配置mailx：</h4><pre><code>[root@localhost ~]# cd /usr/local/bin/[root@localhost bin]# cp mailx /bin/mailcp: overwrite `/bin/mail'? y[root@localhost bin]#</code></pre><h4>4)       配置第三方smtp服务：</h4><p>可以注册新浪邮箱测试发送给网易邮箱</p><pre><code>[root@localhost ~]# vi /etc/nail.rcset from=test001@sina.com              #你的用户名set smtp=smtp://smtp.sina.cn:25set smtp-auth-user= test001@sina.com   #你的用户名set smtp-auth-password= test001        #你的密码</code></pre><h4>5)       测试发送一份邮件</h4>![zabbix](otherimage/1.png)<p>登陆163查看是否收到邮件。</p>![zabbix](otherimage/2.png)<p>调用第三方邮件服务器配置完成，mailx的好处是占用系统资源小，速度快，配置简洁。也可以使用它连接公司内部服务器，这样做就更好了。</p><h2>二.   Zabbix 配置文件配置。</h2><h4>1）  首先我们配置zabbix的配置文件，使其示警媒介支持脚本。</h4>修改<code>zabbix_server.conf</code>中的<pre><code># AlertScriptsPath=$&#123;datadir&#125;/zabbix/alertscripts</code></pre><p>为</p><pre><code>AlertScriptsPath=/usr/loca/zabbix/alertscripts</code></pre><h4>2）  建立示警媒介可执行脚本的存放目录：</h4><pre><code>[root@localhost ~]# mkdir /usr/local/zabbix/alertscripts[root@localhost ~]# chmod 755 /usr/local/zabbix/alertscripts[root@localhost ~]# chown -R zabbix:zabbix /usr/local/zabbix/alertscripts</code></pre><h3>这几步相当重要！！！</h3><h4>3）  脚本的编写：</h4><pre><code>[root@localhost ~]# cat /usr/local/zabbix/alertscripts/sendmail.sh#!/bin/bashecho "$3" | /bin/mail   -s "$2"  $1[root@localhost ~]#<p>非常简单：<br>    说明一下：<br>    $3是邮件内容<br>    $2 邮件标题<br>    $1 发送给谁<br></code></pre></p><h2>三.   Zabbix  web页面配置：</h2><h4>1）  示警媒介配置：</h4>![zabbix](otherimage/3.png)![zabbix](otherimage/4.png)<p>注意其中的类型以及脚本名称</p><p>类型选择脚本，名称选择你在alertscripts目录下建立的脚本文件名称。</p><h4>2）  用户配置</h4>![zabbix](otherimage/5.png)![zabbix](otherimage/6.png)![zabbix](otherimage/7.png)<p>多个收件人，注意以逗号隔开，然后存档。</p><p>注意这个类型选择你在示警媒介中定义的名称。</p><h4>3）  动作配置：</h4>![zabbix](otherimage/8.png)![zabbix](otherimage/9.png)![zabbix](otherimage/10.png)![zabbix](otherimage/12.png)<h4>4）  测试一下：</h4><p>把触发项的阈值调节一下</p>![zabbix](otherimage/14.png)<p>邮件效果：</p>![zabbix](otherimage/15.png)<h4>5）  邮件发送成功在web上页面上如何看到？</h4>![zabbix](otherimage/16.png)<h4>6）  如果邮件发送在linux服务商能成功，就是zabbix发送不成功，在那里看？</h4><p>在51cto有朋友可能遇到这个问题，怎么排错</p><h5>1.首先检查权限，给zabbix脚本目录可执行权限，以及用户，并使用zabbix用户看能否发出邮件，如果是755的权限，基本是不用zabbix用户就能发出来邮件。</h5><h5>2.接着就是同zabbix web自带的审计</h5>![zabbix](otherimage/17.png)<h5>如果信息发送不成功，通常会显示在信息栏，比如超时，等等。在信息栏看到：Timeout while executing a shell script 说明zabbixserver 的timeout设置的过低所以发不出去邮件，默认是3秒，改成10-30秒的样子应问题解决！</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;操作系统环境：&lt;/p&gt;
&lt;pre&gt;CentOS 5.5 x84_64位
Zabbix版本2.2.3
Web服务器：LNMP
&lt;/pre&gt;
&lt;p&gt;
环境部署，参考其他靠谱文档，建议官方文档，今天我们聊聊zabbix邮件告警的事。
项目即监控项，触发器相当于给监控项设置阈值，根</summary>
      
    
    
    
    <category term="zabbix" scheme="https://me.seraphs.blog/categories/zabbix/"/>
    
    <category term="email" scheme="https://me.seraphs.blog/categories/zabbix/email/"/>
    
    
    <category term="编程" scheme="https://me.seraphs.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Zabbix" scheme="https://me.seraphs.blog/tags/Zabbix/"/>
    
    <category term="邮件报警" scheme="https://me.seraphs.blog/tags/%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>python学习</title>
    <link href="https://me.seraphs.blog/python/2015-04-09-python01/"/>
    <id>https://me.seraphs.blog/python/2015-04-09-python01/</id>
    <published>2015-04-09T07:40:05.000Z</published>
    <updated>2022-10-10T03:41:01.611Z</updated>
    
    <content type="html"><![CDATA[<p>python基础环境</p><h5><p>俗话说，工欲善其事必先利其器,学习任何一门知识或者语言,首先要具备良好的基础环境</p></h5><p>配置一个属于自己的编程环境是相当重要的。</br>环境：</br><li>操作系统：Ubuntu 14.04.2 LTS</br></li><li>python软件：python2.7.9</br></li></p><p><li>ubuntu下面安装python需要注意：</li><li>sudo apt-get install zlib1g-dev libreadline-dev  libcurl4-openssl-dev  sqlite3 sqlite</li></p><pre><code>root@5bc95112c8c1:~# cat /etc/issueUbuntu 14.04.2 LTS \n \lroot@5bc95112c8c1:~# uname -r2.6.32-431.el6.x86_64root@5bc95112c8c1:~# uname -sLinuxroot@5bc95112c8c1:~# </code></pre><p>python软件<a href="https://www.python.org/downloads/">下载</a>.</p><pre><code>root@5bc95112c8c1:~/workplace# wget https://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz--2015-04-09 09:34:19--  https://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgzResolving www.python.org (www.python.org)... 103.245.222.223Connecting to www.python.org (www.python.org)|103.245.222.223|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 14725931 (14M) [application/octet-stream]Saving to: 'Python-2.7.6.tgz'51% [====================================================================>                                                                ] 7,639,144   96.4KB/s  eta 85s    ]</code></pre><pre><code>root@5bc95112c8c1:~/workplace# lsPython-2.7.6.tgzroot@5bc95112c8c1:~/workplace#</code></pre> <p>解压python源码包：</p><pre><code>root@5bc95112c8c1:~/workplace# tar -zxf Python-2.7.6.tgz root@5bc95112c8c1:~/workplace#</code></pre> <pre><code>root@5bc95112c8c1:~/workplace# lsPython-2.7.6  Python-2.7.6.tgzroot@5bc95112c8c1:~/workplace# </code></pre><pre><code>root@5bc95112c8c1:~/workplace# cd Python-2.7.6root@5bc95112c8c1:~/workplace/Python-2.7.6# pwd/root/workplace/Python-2.7.6root@5bc95112c8c1:~/workplace/Python-2.7.6# ./configure --prefix=/usr/local/python2.7.6</code></pre><p>环境检查：</p><pre><code>root@5bc95112c8c1:~/workplace/Python-2.7.6# ./configure --prefix=/usr/local/python2.7.6checking build system type... x86_64-unknown-linux-gnuchecking host system type... x86_64-unknown-linux-gnuchecking for --enable-universalsdk... nochecking for --with-universal-archs... 32-bitchecking MACHDEP... linux2checking EXTRAPLATDIR... checking for --without-gcc... nochecking for gcc... gcc..........过程省略..........configure: creating ./config.statusconfig.status: creating Makefile.preconfig.status: creating Modules/Setup.configconfig.status: creating Misc/python.pcconfig.status: creating Modules/ld_so_aixconfig.status: creating pyconfig.hcreating Modules/Setupcreating Modules/Setup.localcreating Makefileroot@5bc95112c8c1:~/workplace/Python-2.7.6#</code></pre>  <p>编译安装包：</p><pre><code>root@5bc95112c8c1:~/workplace/Python-2.7.6# makegcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Modules/python.o ./Modules/python.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/acceler.o Parser/acceler.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/grammar1.o Parser/grammar1.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/listnode.o Parser/listnode.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/node.o Parser/node.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/parser.o Parser/parser.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/parsetok.o Parser/parsetok.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/bitset.o Parser/bitset.cgcc -pthread -c -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include   -DPy_BUILD_CORE -o Parser/metagrammar.o Parser/metagrammar.c..........过程省略..........copying and adjusting /root/workplace/Python-2.7.6/Tools/scripts/2to3 -> build/scripts-2.7copying and adjusting /root/workplace/Python-2.7.6/Lib/smtpd.py -> build/scripts-2.7changing mode of build/scripts-2.7/pydoc from 644 to 755changing mode of build/scripts-2.7/idle from 644 to 755changing mode of build/scripts-2.7/2to3 from 644 to 755changing mode of build/scripts-2.7/smtpd.py from 644 to 755/usr/bin/install -c -m 644 ./Tools/gdb/libpython.py python-gdb.pyroot@5bc95112c8c1:~/workplace/Python-2.7.6#</code></pre> <p>编译安装：</p><pre><code>root@5bc95112c8c1:~/workplace/Python-2.7.6# make installCompiling /usr/local/python2.7.6/lib/python2.7/lib2to3/btm_matcher.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/btm_utils.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixer_base.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixer_util.py ...Listing /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes/__init__.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes/fix_apply.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes/fix_basestring.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes/fix_buffer.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes/fix_callable.py ...Compiling /usr/local/python2.7.6/lib/python2.7/lib2to3/fixes/fix_dict.py .............过程省略..........(cd /usr/local/python2.7.6/bin; ln -s python2 python)rm -f /usr/local/python2.7.6/bin/python2(cd /usr/local/python2.7.6/bin; ln -s python2.7 python2)rm -f /usr/local/python2.7.6/bin/python2-config(cd /usr/local/python2.7.6/bin; ln -s python2.7-config python2-config)rm -f /usr/local/python2.7.6/bin/python-config(cd /usr/local/python2.7.6/bin; ln -s python2-config python-config)test -d /usr/local/python2.7.6/lib/pkgconfig || /usr/bin/install -c -d -m 755 /usr/local/python2.7.6/lib/pkgconfigrm -f /usr/local/python2.7.6/lib/pkgconfig/python2.pc(cd /usr/local/python2.7.6/lib/pkgconfig; ln -s python-2.7.pc python2.pc)rm -f /usr/local/python2.7.6/lib/pkgconfig/python.pc(cd /usr/local/python2.7.6/lib/pkgconfig; ln -s python2.pc python.pc)rm -f /usr/local/python2.7.6/share/man/man1/python2.1(cd /usr/local/python2.7.6/share/man/man1; ln -s python2.7.1 python2.1)rm -f /usr/local/python2.7.6/share/man/man1/python.1(cd /usr/local/python2.7.6/share/man/man1; ln -s python2.1 python.1)root@5bc95112c8c1:~/workplace/Python-2.7.6# </code></pre> <p>配置python环境变量：</p><pre><code>root@5bc95112c8c1:~/workplace/Python-2.7.6# cdroot@5bc95112c8c1:~# root@5bc95112c8c1:~# root@5bc95112c8c1:~# root@5bc95112c8c1:~# cd /usr/local/python2.7.6/root@5bc95112c8c1:/usr/local/python2.7.6# lsbin  include  lib  shareroot@5bc95112c8c1:/usr/local/python2.7.6# cd bin/root@5bc95112c8c1:/usr/local/python2.7.6/bin# root@5bc95112c8c1:/usr/local/python2.7.6/bin# pwd/usr/local/python2.7.6/binroot@5bc95112c8c1:/usr/local/python2.7.6/bin# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binroot@5bc95112c8c1:/usr/local/python2.7.6/bin# root@5bc95112c8c1:/usr/local/python2.7.6/bin# PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/python2.7.6/binroot@5bc95112c8c1:/usr/local/python2.7.6/bin# echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/python2.7.6/binroot@5bc95112c8c1:/usr/local/python2.7.6/bin# export PATH </code></pre><p>测试：</p><pre><code>root@5bc95112c8c1:/usr/local/python2.7.6/bin# cd ~          root@5bc95112c8c1:~# python2.7Python 2.7.6 (default, Apr  9 2015, 10:01:18) [GCC 4.8.2] on linux2Type "help", "copyright", "credits" or "license" for more information.>>> quit()     root@5bc95112c8c1:~# python2.7 --versionPython 2.7.6root@5bc95112c8c1:~# </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;python基础环境&lt;/p&gt;
&lt;h5&gt;&lt;p&gt;俗话说，工欲善其事必先利其器,学习任何一门知识或者语言,首先要具备良好的基础环境&lt;/p&gt;&lt;/h5&gt;
&lt;p&gt;
配置一个属于自己的编程环境是相当重要的。&lt;/br&gt;
环境：&lt;/br&gt;
&lt;li&gt;操作系统：Ubuntu 14.04.2 LT</summary>
      
    
    
    
    <category term="python" scheme="https://me.seraphs.blog/categories/python/"/>
    
    
    <category term="Python" scheme="https://me.seraphs.blog/tags/Python/"/>
    
  </entry>
  
</feed>
